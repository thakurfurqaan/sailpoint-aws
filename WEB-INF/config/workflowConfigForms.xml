<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">

<!-- (c) Copyright 2008 SailPoint Technologies, Inc., All Rights Reserved. -->
<sailpoint>

<!-- 
  -
  - Configuration Form for Identity Update Workflow
  -
  -->
<Form name="Identity Update Config Form" type="WorkflowConfig" hidden="true">
  <Section label="wf_config_provisioning_identity_update_section">
    <Field name="doManualActions" displayName="wf_config_provisioning_advanced_manual_actions" helpKey="help_wf_provisioning_manual_actions" type="boolean"/>
    <Field name="doRefresh" displayName="wf_config_provisioning_advanced_refresh" helpKey="help_wf_provisioning_refresh" type="boolean"/>
    <Field name="foregroundProvisioning" displayName="wf_config_provisioning_advanced_foreground" helpKey="help_wf_provisioning_foreground"  type="boolean"/>
    <Field name="optimisticProvisioning" displayName="wf_config_provisioning_advanced_optimistic" helpKey="help_wf_provisioning_optimistic"  type="boolean"/>
    <Field name="requireCreateTemplates" displayName="wf_config_provisioning_require_create_template" helpKey="help_wf_provisioning_require_create_template"  type="boolean"/>
    <Field name="trace" displayName="wf_config_provisioning_advanced_trace" helpKey="help_wf_trace" type="boolean"/> 
  </Section>
</Form>

<!-- 
  -
  - Configuration Form Approval Step Library
  -
  -->
<Form name="Provisioning Approval Step Form" type="WorkflowConfig" hidden="true">

  <Section label="wf_config_provisioning_approval_setting">

    <Field name="approvalOverride" 
           displayName="wf_config_provisioning_approval_override" 
           helpKey="help_wf_provisioning_reference_update"
           type="boolean"
           postBack="true">       

      <Attributes>
        <Map>
          <entry key="hidden" value='script: return !stepDTO.isArgReference("approvalScheme");'/>
        </Map>
      </Attributes>   
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            if ( approvalScheme != void && approvalScheme != null && stepDTO.isArgReference("approvalScheme") &&  sailpoint.workflow.FormUtil.isFieldEqual(approvalScheme, "approvalScheme", stepDTO)) {
               return false;
            }
            return true;
          ]]>
        </Source>
      </Script>
    </Field>

    <Field name="approvalSchemeField"
           displayName="wf_config_provisioning_approval_approver"
           helpKey="help_wf_provisioning_approval_setting"
           postBack="true"           
           multi="true"> 
           
      <Description>
        This field is dynamic based on the type of workflow,
        as the approval scheme values is the only real 
        difference between what we need for Create and 
        Update vs. normal provisioning. The type
        is injected into the rule/script context
        by the WorkflowBean.
      </Description>
      
      <Attributes>
        <Map>
          <entry key="readOnly" value="script: return !approvalOverride;"/>         
        </Map>
      </Attributes>
    
      <AllowedValuesDefinition>
        <Script>
          <Source>
            <![CDATA[
              import sailpoint.tools.Util;
              
              List values = new ArrayList();                           

              List manager = new ArrayList();
              manager.add("manager");
              manager.add("wf_config_provisioning_approval_manager");
              values.add(manager);

              List owner = new ArrayList();
              owner.add("owner");
              owner.add("wf_config_provisioning_approval_owner");
              values.add(owner);
             
              List identity = new ArrayList();
              identity.add("identity");
              identity.add("wf_config_provisioning_approval_identityOrWorkgroup");
              values.add(identity);
                                 
              List so = new ArrayList();
              so.add("securityOfficer");             
              so.add("wf_config_provisioning_approval_so");
              values.add(so);

              return values;
            ]]>             
          </Source>
        </Script>
      </AllowedValuesDefinition>      
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            List list = null;
            if ( approvalSchemeField == void && approvalScheme != void ) {
                if ( approvalSchemeField != null && Util.otob(approvalOverride)) {
                    list = Util.csvToList(approvalScheme);
                } 
            }                
            return list;
          ]]>
        </Source>
      </Script>
             
    </Field>
        
    <Field name="approvalScheme" 
           type="string"  
           hidden="true"       
           dynamic="true">
       <Description>
        This is the value that gets set on the arg value.
      </Description>
      
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;

            String csv = null;

            if ( approvalSchemeField != void ) {
                csv = Util.listToCsv(approvalSchemeField);                
                if ( approvalOverride != void && !Util.otob(approvalOverride) ) {
                    csv = stepDTO.getArgScript("approvalScheme");
                    if ( approvalSchemeField != null ) {
                        approvalSchemeField.clear();
                    }
                }
            }
            
            return csv;
          ]]>
        </Source>
      </Script>
     </Field>
           
    <Field name="approvingIdentities" displayName="wf_config_provisioning_approval_identityOrWorkgroup_label" 
           helpKey="help_wf_provisioning_identities_scheme" 
           multi="true" 
           type="identity">
       <Attributes>
        <Map>
          <entry key="hidden" 
                 value='script: return !sailpoint.tools.Util.nullSafeContains( approvalSchemeField, "identity");'/>         
        </Map>
      </Attributes>

    </Field>
        
    <Field name="securityOfficerName" 
           displayName="wf_config_provisioning_approval_security_officer" 
           helpKey="help_wf_provisioning_securityofficer_name" type="identity"
           dynamic="true">
 
       <Attributes>
        <Map>
          <entry key="hidden" value='script: return !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "securityOfficer");'/>
        </Map>
      </Attributes>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "securityOfficer")  ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source>
      </Script>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && Util.nullSafeContains(approvalSchemeField, "securityOfficer") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>    

    <Field  name="fallbackApprover"  displayName="wf_config_provisioning_approval_fallback_approver" 
            dynamic="true" helpKey="help_wf_provisioning_fallback_approver"
            type="identity">
      <Attributes>
        <Map>
          <entry key="extraRecords" value='script: sailpoint.workflow.FormUtil.buildExtraFields(field, stepDTO, locale);'/>     
          <entry key="hidden" value='script: return approvalSchemeField == null || sailpoint.tools.Util.nullSafeContains( approvalSchemeField, "none");'/>
        </Map>
      </Attributes>
      <Script>
        <Source>
         <![CDATA[
           return value;
          ]]>
        </Source> 
      </Script>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && approvalSchemeField != null || Util.nullSafeContains(approvalSchemeField, "none") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>    

  </Section>
  
  <Section label="wf_config_provisioning_approval_notification_section">
    <Attributes>
      <Map>     
        <entry key="hidden" value="script: approvalSchemeField == null"/>
      </Map>
    </Attributes>  
   
    <Field name="managerEmailTemplate" displayName="wf_config_provisioning_approval_manager_email" 
           helpKey="help_wf_provisioning_manager_approval_emailtemplate" type="EmailTemplate" dynamic="true">
      <Attributes>
        <Map>
          <entry key="hidden" value='script: return ( approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "manager") )'/>
          <entry key="extraRecords" value='script: sailpoint.workflow.FormUtil.buildExtraFields(field, stepDTO, locale);'/>
        </Map>
      </Attributes>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "manager") ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source> 
      </Script>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && Util.nullSafeContains(approvalSchemeField, "manager") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>
       
    <Field name="ownerEmailTemplate" displayName="wf_config_provisioning_approval_owner_email" 
           helpKey="help_wf_provisioning_owner_approval_emailtemplate" type="EmailTemplate"
           dynamic="true">
      <Attributes>
        <Map>
          <entry key="hidden" value='script: approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "owner")'/>
          <entry key="extraRecords" value='script: sailpoint.workflow.FormUtil.buildExtraFields(field, stepDTO, locale);'/>                    
        </Map>
      </Attributes>
      <Script>
        <Source>
         <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "owner")  ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source> 
      </Script>  
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && Util.nullSafeContains(approvalSchemeField, "owner") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>     
    </Field>
    
    <Field name="securityOfficerEmailTemplate" displayName="wf_config_provisioning_approval_so_email" 
           helpKey="help_wf_provisioning_so_approval_emailtemplate" type="EmailTemplate"
           dynamic="true">
      <Attributes>
        <Map>
          <entry key="hidden" value='script: approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "securityOfficer")'/>
          <entry key="extraRecords" value='script: sailpoint.workflow.FormUtil.buildExtraFields(field, stepDTO, locale);'/>
        </Map>
      </Attributes>
      <Script>
        <Source>
         <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "securityOfficer")  ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source> 
      </Script>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && Util.nullSafeContains(approvalSchemeField, "securityOfficer") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript> 
    </Field>
        
    <Field name="identityEmailTemplate" displayName="wf_config_provisioning_approval_identity_email" 
           helpKey="help_wf_provisioning_identity_approval_emailtemplate" type="EmailTemplate"
           dynamic="true">
      <Attributes>
        <Map>
          <entry key="hidden" value='script: approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "identity")'/>
        </Map>
      </Attributes>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && Util.nullSafeContains(approvalSchemeField, "identity") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>  
      <Script>
        <Source>
         <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "identity")  ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source> 
      </Script>  
    </Field>
  </Section>
  
  <Section label="wf_config_provisioning_approval_electronic_sig_section">
    <Attributes>
      <Map>     
        <entry key="hidden" value="script: approvalSchemeField == null"/>
      </Map>
    </Attributes> 
            
    <Field name="managerElectronicSignature" displayName="wf_config_provisioning_approval_manager_esig"
           helpKey="help_wf_provisioning_manager_esig" type="string"
           dynamic="true">

      <Attributes>
        <Map>     
          <entry key="hidden" value='script: return ( approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "manager") )'/>
        </Map>
      </Attributes>   

      <AllowedValuesDefinition>
        <Script>
          <Source>
            import sailpoint.workflow.FormUtil;
            return FormUtil.getStepElectronicSignatureNames(context, field, stepDTO, locale);
          </Source>
        </Script>
      </AllowedValuesDefinition>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "manager") ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source>
       </Script>
    </Field>

    <Field name="ownerElectronicSignature" displayName="wf_config_provisioning_approval_owner_esig"
           helpKey="help_wf_provisioning_owner_esig" type="string"
           dynamic="true">

      <Attributes>
        <Map>     
          <entry key="hidden" value='script: approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "owner")'/>
        </Map>
      </Attributes>
      <AllowedValuesDefinition>
        <Script>
          <Source>
            import sailpoint.workflow.FormUtil;
            return FormUtil.getStepElectronicSignatureNames(context, field, stepDTO, locale);
          </Source>
        </Script>
      </AllowedValuesDefinition>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "owner")  ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source> 
      </Script>
      
    </Field>
    
    <Field name="securityOfficerElectronicSignature" displayName="wf_config_provisioning_approval_security_esig"
           helpKey="help_wf_provisioning_sofficer_esig" type="string"
           dynamic="true">

      <Attributes>
        <Map>     
          <entry key="displayName" value="wf_config_provisioning_approval_security_esig1"/>
          <entry key="hidden" value='script: approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "securityOfficer")'/>
        </Map>
      </Attributes>
      <AllowedValuesDefinition>
        <Script>
          <Source>
            import sailpoint.workflow.FormUtil;
            return FormUtil.getStepElectronicSignatureNames(context, field, stepDTO, locale);
          </Source>
        </Script>
      </AllowedValuesDefinition>   
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "securityOfficer")  ) {
                    val = null;
                } 
            }
            return val;
          ]]>
        </Source> 
      </Script>         
    </Field>
    
    <Field name="identityElectronicSignature" displayName="wf_config_provisioning_approval_identity_esig"
           helpKey="help_wf_provisioning_identity_esig" type="string"
           dynamic="true">

      <Attributes>
        <Map>     
          <entry key="hidden" value='script: approvalSchemeField == null || !sailpoint.tools.Util.nullSafeContains(approvalSchemeField, "identity")'/>
        </Map>
      </Attributes>   
      <AllowedValuesDefinition>
        <Script>
          <Source>
            import sailpoint.workflow.FormUtil;
            return FormUtil.getStepElectronicSignatureNames(context, field, stepDTO, locale);
          </Source>
        </Script>
      </AllowedValuesDefinition>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            String val = value;
            if ( value != null && stepDTO.isLiteral(field.getName() ) ) {
                if ( Util.otob(approvalOverride) && !Util.nullSafeContains(approvalSchemeField, "identity")  ) {
                    val = null;
                } 
            }
            return val;;
          ]]>
        </Source> 
      </Script>
    </Field>
    
  </Section>
  
  <Section label="wf_config_provisioning_approval_reminders_title">
  
    <Field name="approvalEscalation" displayName="wf_config_provisioning_approval_reminder_setting" 
           helpKey="help_wf_provisioning_approval_escalation_setting" 
           type="string" postBack="true">

      <AllowedValuesDefinition>
        <Value>
          <List>
            <List>
              <String>none</String>
              <String>wf_config_provisioning_approval_reminder_setting_none</String>
            </List>
            <List>
              <String>sendReminders</String>
              <String>wf_config_provisioning_approval_reminder_setting_remind</String>
            </List>
            <List>
              <String>escalateOnly</String>
              <String>wf_config_provisioning_approval_reminder_setting_escalate</String>
            </List>
            <List>
              <String>reminderEsclate</String>
              <String>wf_config_provisioning_approval_reminder_setting_reminder_escalate</String>
            </List>
          </List>
        </Value>
      </AllowedValuesDefinition>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            // dafault to none
            String val = "none";
            boolean reminderTemplateEnabled = false;
            boolean workItemEscalationRuleEnabled = false;
            
            if ( workItemReminderTemplate != void && workItemReminderTemplate != null ) {
                reminderTemplateEnabled = true;
            }
            
            if ( workItemEscalationRule != void && workItemEscalationRule != null ) {
                workItemEscalationRuleEnabled = true;
            }
            
            if ( reminderTemplateEnabled ) {
                val = "sendReminders";
            } 
            
            if ( workItemEscalationRuleEnabled && !reminderTemplateEnabled ) {
                val = "escalateOnly";
            }
            
            if ( reminderTemplateEnabled && workItemEscalationRuleEnabled ) { 
                val = "reminderEsclate";
            }
            
            return val;
          ]]>
        </Source>
      </Script>            
    </Field>
    
    <Field name="workItemReminderTemplate" displayName="wf_config_provisioning_approval_reminder_template" 
           helpKey="help_wf_provisioning_approval_reminder_email" type="EmailTemplate"
           dynamic="true">
           
      <Attributes>
        <Map>     
          <entry key="hidden" value='script: return approvalEscalation == null || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "none") || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "escalateOnly")'/>
        </Map>
      </Attributes> 
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;

            String val = value;
            if ( approvalEscalation == null || Util.nullSafeEq(approvalEscalation, "none") || Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
               val = "";
            } 
            return val;
          ]]>
        </Source>
      </Script>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && approvalEscalation != null && !Util.nullSafeEq(approvalEscalation, "none") && !Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>
    
    <Field name="workItemDaysBeforeReminderField" displayName="wf_config_provisioning_approval_reminder_days" 
           helpKey="help_wf_provisioning_approval_reminder_days"
           dynamic="true" >
           
      <Attributes>
        <Map>     
          <entry key="hidden" value='script: return approvalEscalation == null || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "none") || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "escalateOnly")'/>
        </Map>
      </Attributes>  
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.workflow.FormUtil;

            String val = value;
            if ( workItemDaysBeforeReminderField == void && value == null && workItemHoursTillEscalation != void ) {
                if ( Util.atoi(workItemHoursTillEscalation) > 0 ) {            
                    val = FormUtil.convertHoursToDays(workItemHoursTillEscalation);
                } else {
                    val = workItemHoursTillEscalation;
                }
            }             
            if ( approvalEscalation == null || Util.nullSafeEq(approvalEscalation, "none") || Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
               val = "";
            } 
            return val;
          ]]>
        </Source>
      </Script> 
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && approvalEscalation != null && !Util.nullSafeEq(approvalEscalation, "none") && !Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>  
    </Field>

    <Field name="workItemDaysBetweenRemindersField" displayName="wf_config_provisioning_approval_reminder_frequency_days" 
           helpKey="help_wf_provisioning_approval_reminder_frequency_days" 
           dynamic="true">
           
      <Attributes>
        <Map>     
          <entry key="hidden" value='script: return approvalEscalation == null || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "none") || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "escalateOnly")'/>
        </Map>
      </Attributes>     
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.workflow.FormUtil;
            import sailpoint.tools.Util;

            String val = value;
            if ( workItemDaysBetweenRemindersField == void && value == null && workItemHoursBetweenReminders != void ) {
                if ( Util.atoi(workItemHoursBetweenReminders) > 0 ) {            
                    val = FormUtil.convertHoursToDays(workItemHoursBetweenReminders);
                } else {
                    val = workItemHoursBetweenReminders;
                }                             
            } 
            if ( approvalEscalation == null || Util.nullSafeEq(approvalEscalation, "none") || Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
                val = "";
            }            
            return val;
          ]]>
        </Source>
      </Script>   
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && approvalEscalation != null && !Util.nullSafeEq(approvalEscalation, "none") && !Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>       
    </Field>
    
    <Field name="workItemMaxReminders" displayName="wf_config_provisioning_approval_max_reminders" 
           helpKey="help_wf_provisioning_approval_max_reminder" 
           dynamic="true">
           
      <Attributes>
        <Map>     
          <entry key="hidden" value='script: !sailpoint.tools.Util.nullSafeEq(approvalEscalation, "reminderEsclate");'/>
        </Map>
      </Attributes>     
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;

            Object val = value;
            if ( !Util.nullSafeEq(approvalEscalation, "reminderEsclate") ) {
                val = "";
            }            
            return val;
          ]]>
        </Source>
      </Script>
    </Field>
    
    <Field name='workItemHoursBetweenReminders' 
           hidden="true" 
           dynamic="true">
      <Description>
         This is the value required by the Workflow engine, using the field above convert the days into hours.

         Workflow.ARG_WORK_ITEM_HOURS_BETWEEN_REMINDERS
      </Description>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.workflow.FormUtil;
            import sailpoint.tools.Util;
            
            String val = value;
            if ( workItemDaysBetweenRemindersField != void ) {
                if ( Util.atoi(workItemDaysBetweenRemindersField) > 0 ) {            
                    val = FormUtil.convertDaysToHours(workItemDaysBetweenRemindersField);
                }  else {
                    val = workItemDaysBetweenRemindersField;
                }
            }
            return val;
          ]]>
        </Source>
      </Script>
    </Field>
                
    <Field name="workItemEscalationRule" 
           filterString='type == "Escalation"'
           displayName="wf_config_provisioning_approval_escalation_rule"
           helpKey="help_wf_provisioning_approval_escalation_rule" 
           dynamic="true"
           type="rule">
      
      <Attributes>
        <Map>     
          <entry key="hidden" value='script: return approvalEscalation == null || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "none") || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "sendReminders")'/>
        </Map>
      </Attributes>   
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;

            String val = value;
            if ( approvalEscalation == null || Util.nullSafeEq(approvalEscalation, "none") || Util.nullSafeEq(approvalEscalation, "sendReminders") ) {
                val = "";
            }
            return val;
          ]]>
        </Source>
      </Script>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && approvalEscalation != null && !Util.nullSafeEq(approvalEscalation, "none") && !Util.nullSafeEq(approvalEscalation, "sendReminders") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>
    
    <Field name="workItemEscalationTemplate" displayName="wf_config_provisioning_approval_escalation_template" 
           helpKey="help_wf_provisioning_approval_escalation_email" type="EmailTemplate"
           dynamic="true">
           
      <Attributes>
        <Map>     
          <entry key="hidden" value='script: return approvalEscalation == null || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "none") || sailpoint.tools.Util.nullSafeEq(approvalEscalation, "sendReminders")'/>
        </Map>
      </Attributes>     
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;

            String val = value;
            if ( approvalEscalation == null || Util.nullSafeEq(approvalEscalation, "none") || Util.nullSafeEq(approvalEscalation, "sendReminders") ) {
                val = "";
            }
            return val;
          ]]>
        </Source>
      </Script>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && approvalEscalation != null && !Util.nullSafeEq(approvalEscalation, "none") && !Util.nullSafeEq(approvalEscalation, "sendReminders") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>
            
    <Field name="workItemDaysTillEscalationField" displayName="wf_config_provisioning_approval_max_days_reminders" 
           helpKey="help_wf_provisioning_approval_max_days_reminder"
           dynamic="true">           
      <Attributes>
        <Map>     
          <entry key="hidden" value='script: return !sailpoint.tools.Util.nullSafeEq(approvalEscalation, "escalateOnly");'/>
        </Map>
      </Attributes>           
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.workflow.FormUtil;

            String val = value;
            if ( workItemDaysTillEscalationField == void ) {
                if ( value == null && workItemHoursTillEscalation != void ) {
                    if ( Util.atoi(workItemHoursTillEscalation) > 0 ) {
                        val = FormUtil.convertHoursToDays(workItemHoursTillEscalation);
                    } else {
                        val = workItemHoursTillEscalation;
                    }
                }                              
            } 
            
            if ( approvalEscalation == null || Util.nullSafeEq(approvalEscalation, "none") || Util.nullSafeEq(approvalEscalation, "sendReminders") ) {
                val = "";
            }
            return val;
          ]]>
        </Source>
      </Script>
       <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>
           
    <Field name="workItemHoursTillEscalation"  
           hidden="true"
           dynamic="true">
      <Description>
         This is required for both escallation AND reminders, don't let the attribute name fool you.
         
         The way it works is that the WorkItem has to sit for hoursTillEscalation before the process begins.  

         Then a "clock" starts and on each tick we first send reminders up to maxReminders, then we run the
         escalation rule to change owners.  After the owner change we send reminders again on each tick 
         up to maxReminders and then run the escalation rule again.  
         
         If the approvalEscalation == sendReminders OR reminderEsclate we use the workItemDaysBeforeReminderField field
         If the approvalEscalation == escalateOnly we use the workItemDaysTillEscalationField field 
         
         We ignore negative number conversion because that represent seconds.
      </Description>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.workflow.FormUtil;
            import sailpoint.tools.Util;
            
            String val = value;
            if ( approvalEscalation != void ) {
                 String toConvert = null;
                 if ( Util.nullSafeEq(approvalEscalation, "sendReminders") || Util.nullSafeEq(approvalEscalation, "reminderEsclate") ) {
                     toConvert = workItemDaysBeforeReminderField;
                 } else
                 if ( Util.nullSafeEq(approvalEscalation, "escalateOnly") ) {
                     toConvert = workItemDaysTillEscalationField;
                 } 
                 if ( toConvert != null ) {
                     int i = Util.atoi(toConvert);
                     // If its negative leave it, can be used to convey seconds
                     if ( i > 0 ) {
                         val = FormUtil.convertDaysToHours(toConvert);
                     } else {
                         val = toConvert;
                     }
                 }
             }
             // Clear value if necessary
             if ( approvalEscalation == null || Util.nullSafeEq(approvalEscalation, "none") ) {
                 val = null;
             }
             return val;
          ]]>
        </Source>
      </Script>
    </Field>
  </Section>
  
  <Section label="wf_config_provisioning_advanced_section">
  
    <Field name="approvalMode" displayName="wf_config_provisioning_approval_mode" 
           helpKey="help_wf_provisioning_approval_mode" 
           type="string">

      <AllowedValuesDefinition>
        <Script>
          <Source>
              <![CDATA[
              import sailpoint.tools.Util;
              import sailpoint.workflow.FormUtil;

              List values = new ArrayList();

              val = new ArrayList();
              val.add("parallel");
              val.add("wf_config_provisioning_approval_mode_parallel");
              values.add(val);

              val = new ArrayList();
              val.add("serial");
              val.add("wf_config_provisioning_approval_mode_serial");
              values.add(val);

              List val = new ArrayList();
              val.add("parallelPoll");
              val.add("wf_config_provisioning_approval_mode_parallel_poll");
              values.add(val);

              val = new ArrayList();
              val.add("serialPoll");
              val.add("wf_config_provisioning_approval_mode_serial_poll");
              values.add(val);

              val = new ArrayList();
              val.add("any");
              val.add("wf_config_provisioning_approval_mode_any");
              values.add(val);

              val = FormUtil.buildExtraComboFields(field, stepDTO, locale);
              if (!Util.isEmpty(val)) {
                values.add(val);
              }

              return values;
            ]]>
          </Source>
        </Script>
      </AllowedValuesDefinition>    
      <Attributes>
        <Map>     
          <entry key="hidden" value="script: approvalSchemeField == null"/>
        </Map>
      </Attributes>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            
            String mode = "parallelPoll";
            if ( current != null ) {
                mode = current;
            }             
            return mode;
          ]]>
        </Source>
      </Script>
    </Field>

    <Field name="approvalAssignmentRule" 
           displayName="wf_config_provisioning_approval_assignment_rule"
           helpKey="help_wf_provisioning_approval_assignment_rule" 
           type="rule"
           filterString='type == "ApprovalAssignment"'>
      <ValidationScript>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && approvalSchemeField == null && Util.otob(approvalOverride ) ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
        </Source>
      </ValidationScript>
    </Field>
    
  </Section>
  
</Form>

<!-- 
  -
  - Configuration Form for Notifications
  -
  -->
<Form name="Provisioning Notification Step Form" type="WorkflowConfig" hidden="true">
  <Attributes>
    <Map>
      <entry key="maxWidth" value="500"/>
    </Map>
  </Attributes>
  <Section label="wf_config_provisioning_notification_section">
    <Field name="notificationScheme" displayName="wf_config_provisioning_notification_scheme"
           helpKey="help_wf_provisioning_notification_scheme" 
           type="string" multi="true"
           postBack="true">
      <Attributes>
        <Map>     
          <entry key="ignoreWidth">
            <value><Boolean>true</Boolean></value>
          </entry>
          <entry key="anchorConfig" value="100%"/>
        </Map>
      </Attributes>     
      <AllowedValuesDefinition>
        <Script>
          <Source>
            <![CDATA[
              import sailpoint.tools.Util;

              List values = new ArrayList();
         
              val = new ArrayList();
              val.add("user");
              val.add("wf_config_provisioning_notification_user");
              values.add(val);

              val = new ArrayList();
              val.add("requester");
              val.add("wf_config_provisioning_notification_requester");
              values.add(val);

              List val = new ArrayList();
              val.add("manager");
              val.add("wf_config_provisioning_notification_manager");
              values.add(val);
              
              val = new ArrayList();
              val.add("securityOfficer");
              val.add("wf_config_provisioning_notification_security_officer");
              values.add(val);

              val = new ArrayList();
              val.add("otherUsers");
              val.add("wf_config_provisioning_notification_other_users");
              values.add(val);

              return values;
            ]]>             
          </Source>
        </Script>
      </AllowedValuesDefinition>
      <Script>
        <Source>
          <![CDATA[
            import sailpoint.tools.Util;

            List val = null;

            // References are not supported in this form right now so initialize the value 
            // to null if we get a reference
            if ( notificationScheme != void && notificationScheme != null && !notificationScheme.startsWith("ref:")) {
                val = Util.csvToList(notificationScheme);
            }

            return val;
          ]]>
        </Source>
      </Script>   
    </Field>

    <Field name="otherUsersToNotify" displayName="wf_config_provisioning_notification_other_users_names"
           helpKey="help_wf_provisioning_other_users_names" type="Identity" multi="true" dynamic="true">
      <Attributes>
        <Map>
          <entry key='hidden' value='script: return !sailpoint.tools.Util.nullSafeContains(notificationScheme, "otherUsers")'/>
          <entry key="ignoreWidth">
            <value><Boolean>true</Boolean></value>
          </entry>
          <entry key="anchorConfig" value="100%"/>
        </Map>
      </Attributes>
    </Field>
    
    <Field name="securityOfficerName" displayName="wf_config_provisioning_notification_security_officer_name"
           helpKey="help_wf_provisioning_securityofficer_name" type="Identity" dynamic="true">
      <Attributes>
        <Map>
          <entry key='hidden' value='script: return !sailpoint.tools.Util.nullSafeContains(notificationScheme, "securityOfficer")'/>
        </Map>
      </Attributes>
    </Field>
  </Section>

  <Section label="wf_config_email_templates" name="Email Templates">
    <Attributes>
      <Map>
        <entry key='hidden' value='script: return sailpoint.tools.Util.isEmpty(notificationScheme)'/>
      </Map>
    </Attributes>

    <Field name="userEmailTemplate" displayName="wf_config_provisioning_notification_user_email"
           helpKey="help_wf_provisioning_user_template" type="EmailTemplate" dynamic="true">
      <Attributes>
        <Map>
          <entry key='hidden' value='script: return !sailpoint.tools.Util.nullSafeContains(notificationScheme, "user")'/>
        </Map>
      </Attributes>
    </Field>
    
    <Field name="requesterEmailTemplate" displayName="wf_config_provisioning_notification_requester_email"
           helpKey="help_wf_provisioning_requester_template" type="EmailTemplate" dynamic="true">
      <Attributes>
        <Map>
          <entry key='hidden' value='script: return !sailpoint.tools.Util.nullSafeContains(notificationScheme, "requester")'/>
        </Map>
      </Attributes>
    </Field>
    
    <Field name="managerEmailTemplate" displayName="wf_config_provisioning_notification_manager_email"
           helpKey="help_wf_provisioning_manager_template" type="EmailTemplate" dynamic="true">
      <Attributes>
        <Map>
          <entry key='hidden' value='script: return !sailpoint.tools.Util.nullSafeContains(notificationScheme, "manager")'/>
        </Map>
      </Attributes>
    </Field>
    
    <Field name="securityOfficerEmailTemplate" displayName="wf_config_provisioning_notification_security_officer_email"
           helpKey="help_wf_provisioning_securityofficer_template" type="EmailTemplate" dynamic="true">
      <Attributes>
        <Map>
          <entry key='hidden' value='script: return !sailpoint.tools.Util.nullSafeContains(notificationScheme, "securityOfficer")'/>
        </Map>
      </Attributes>
    </Field>

    <Field name="otherUsersToNotifyEmailTemplate" displayName="wf_config_provisioning_notification_other_users_email"
           helpKey="help_wf_provisioning_other_users_template" type="EmailTemplate" dynamic="true">
      <Attributes>
        <Map>
          <entry key='hidden' value='script: return !sailpoint.tools.Util.nullSafeContains(notificationScheme, "otherUsers")'/>
        </Map>
      </Attributes>
    </Field>
  </Section>
</Form>

</sailpoint>