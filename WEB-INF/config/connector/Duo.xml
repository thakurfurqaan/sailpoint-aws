<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE ImportAction PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<ImportAction name="connectorRegistryUpdateAction">
  <Application connector="sailpoint.connector.OpenConnectorAdapter" featuresString="PROVISIONING, SYNC_PROVISIONING, UNLOCK, ENABLE, SEARCH, PASSWORD" icon="internetIcon" name="Duo" type="Duo">
    <Attributes>
      <Map>
        <entry key="adminUsersUri" value="/admin/v1/admins"/>
        <entry key="connectorClass" value="openconnector.connector.Duo.DuoConnector"/>
        <entry key="formPath" value="DuoAttributesForm.xhtml"/>
        <entry key="usersUri" value="/admin/v1/users"/>
        <entry key="groupUri" value="/admin/v1/groups"/>
        <entry key="phoneUri" value="/admin/v1/phones"/>
        <entry key="enrollUserUri" value="/admin/v1/users/enroll"/>
        <entry key="groups" value="group_id"/>
        <entry key="phones" value="number"/>
        <entry key="tokens" value="token_id"/>
        <entry key="encrypted" value="authPassword"/>
      </Map>
    </Attributes>
  <Schemas>
    <Schema displayAttribute="username" identityAttribute="user_id" instanceAttribute="" nativeObjectType="account" objectType="account">
      <AttributeDefinition name="username" type="string">
        <Description>User Name</Description>
      </AttributeDefinition>
      <AttributeDefinition name="status" remediationModificationType="None" type="string">
        <Description>User Status</Description>
      </AttributeDefinition>
      <AttributeDefinition name="email" type="string">
        <Description>Email ID </Description>
      </AttributeDefinition>
      <AttributeDefinition name="user_id" type="string">
        <Description>User ID </Description>
      </AttributeDefinition>
      <AttributeDefinition name="realname" type="string">
        <Description>Real Name </Description>
      </AttributeDefinition>
      <AttributeDefinition multi="true" name="notes" type="string">
        <Description>Notes </Description>
      </AttributeDefinition>
      <AttributeDefinition entitlement="true" managed="true" multi="true" name="groups" remediationModificationType="None" schemaObjectType="group"  type="string">
        <Description>Name of Groups to which the user is connected to</Description>
      </AttributeDefinition>
      <AttributeDefinition multi="true" name="phones" type="string">
        <Description>Phone numbers of User Account</Description>
      </AttributeDefinition>
      <AttributeDefinition name="last_login" type="string">
        <Description>Last login time of User Account</Description>
      </AttributeDefinition>
      <AttributeDefinition multi="true" name="tokens" type="string">
        <Description>Token for the User Account</Description>
      </AttributeDefinition>
      <AttributeDefinition multi="true" name="desktoptokens" type="string">
        <Description>Desktop tokens for the User Account</Description>
      </AttributeDefinition>
      <AttributeDefinition name="role" type="string">
       <Description>Administrator role</Description>
     </AttributeDefinition>
     <AttributeDefinition name="user_type" type="string">
       <Description>Type of user</Description>
     </AttributeDefinition>
     <AttributeDefinition name="restricted_by_admin_units" type="boolean">
       <Description>Administrator account restricted by an administrative unit assignment</Description>
     </AttributeDefinition>
      <AttributeDefinition name="alias1" type="string">
        <Description>Username Alias 1</Description>
      </AttributeDefinition>
      <AttributeDefinition name="alias2" type="string">
        <Description>Username Alias 2</Description>
      </AttributeDefinition>
      <AttributeDefinition name="alias3" type="string">
        <Description>Username Alias 3</Description>
      </AttributeDefinition>
      <AttributeDefinition name="alias4" type="string">
        <Description>Username Alias 4</Description>
      </AttributeDefinition>
    </Schema>
    <Schema displayAttribute="name" identityAttribute="group_id" instanceAttribute="" nativeObjectType="group"
            objectType="group" descriptionAttribute="desc">
      <AttributeDefinition name="name" type="string">
        <Description>Group Name</Description>
      </AttributeDefinition>
      <AttributeDefinition name="desc" type="string">
        <Description>Group Description</Description>
      </AttributeDefinition>
      <AttributeDefinition name="status" type="string">
        <Description>Group Status</Description>
      </AttributeDefinition>
      <AttributeDefinition name="group_id" type="string">
        <Description>Group ID</Description>
      </AttributeDefinition>
      <AttributeDefinition name="voice_enabled" type="boolean">
        <Description>Voice Enabled Flag</Description>
      </AttributeDefinition>
      <AttributeDefinition name="sms_enabled" type="boolean">
        <Description>SMS Enabled Flag</Description>
      </AttributeDefinition>
      <AttributeDefinition name="mobile_otp_enabled" type="boolean">
        <Description>Mobile One Time Password Enabled Flag</Description>
      </AttributeDefinition>
      <AttributeDefinition name="push_enabled" type="boolean">
        <Description>Push Enabled Flag</Description>
      </AttributeDefinition>
    </Schema>
  </Schemas>
    <Templates>
      <Template name="account" schemaObjectType="account" usage="Create">
        <Field displayName="con_prov_policy_duo_user_type" helpKey="help_con_prov_policy_duo_user_type" name="user_type" postBack="true" required="true" reviewRequired="true" section="create" type="string" value="User">
          <AllowedValuesDefinition>
            <Value>
              <List>
                <String>User</String>
                <String>Administrator</String>
              </List>
            </Value>
          </AllowedValuesDefinition>
          <Attributes>
            <Map>
              <entry key="hidden">
                <value>
                  <Script>
                    <Source>
                           if ("User".equalsIgnoreCase(field.getValue())) {
                               if ( form.getSection("create") != null &amp;&amp; form.getSection("create").getFields() != null ) {
                                      for (Object field : form.getSection("create").getFields()) {
                                         String name = field.getName();
                                         if (name != null &amp;&amp; name.indexOf(":") > 0 ) {
                                            String[] nameKeys = name.split(":");
                                                if (nameKeys.length > 1 &amp;&amp;
                                                  ("username".equalsIgnoreCase(nameKeys[2]))){
                                                  field.setRequired(true);
                                                }
                                                if (nameKeys.length > 1 &amp;&amp;
                                                  ("name".equalsIgnoreCase(nameKeys[2]) 
                                                 || "phone".equalsIgnoreCase(nameKeys[2]) || "password".equalsIgnoreCase(nameKeys[2]) || "role".equalsIgnoreCase(nameKeys[2]))){
                                                  field.setHidden(true);
                                                }
                                            }
                                        }
                                     }
                           } else {
                                   if ( form.getSection("create") != null &amp;&amp; form.getSection("create").getFields() != null ) {
                                      for (Object field : form.getSection("create").getFields()) {
                                         String name = field.getName();
                                         if (name != null &amp;&amp; name.indexOf(":") > 0 ) {
                                            String[] nameKeys = name.split(":");
                                              if (nameKeys.length > 1 &amp;&amp;
                                                  ("username".equalsIgnoreCase(nameKeys[2]) 
                                                 || "phones".equalsIgnoreCase(nameKeys[2]))){
                                                  field.setHidden(true);
                                                }
                                               if (nameKeys.length > 1 &amp;&amp;
                                                  ("name".equalsIgnoreCase(nameKeys[2]) 
                                                 || "phone".equalsIgnoreCase(nameKeys[2]) || "password".equalsIgnoreCase(nameKeys[2]))){
                                                  field.setRequired(true);
                                                }
                                            }
                                        }
                                     }
                                  }
                                  
                           return false;
                    </Source>
                  </Script>
                </value>
              </entry>
            </Map>
          </Attributes>
        </Field>
        <Field displayName="con_prov_policy_duo_user_name" helpKey="help_con_prov_policy_duo_user_name" name="username" reviewRequired="true" section="create" type="string"/>
        <Field displayName="con_prov_policy_duo_email" helpKey="help_con_prov_policy_duo_email" name="email" required="true" section="create" type="string"/>
        <Field displayName="con_prov_policy_duo_real_name" helpKey="help_con_prov_policy_duo_real_name" name="realname" section="create" type="string"/>
        <Field displayName="con_prov_policy_duo_phone" helpKey="help_con_prov_policy_duo_phone" multi="true" name="phones" reviewRequired="true" section="create" type="string">
          <ValidationScript>
            <Source>
              import java.util.regex.Matcher;
              import java.util.regex.Pattern;
              import java.util.ArrayList;
              import java.util.List;
              List errors = null;
              String regex = "(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})";
              Pattern pattern = Pattern.compile(regex);
              if (phones != null) {
                  for (String phone: phones) {
                      if (phone != null) {
                          Matcher matcher = pattern.matcher(phone);
                          if (!matcher.matches()) {
                              if (errors == null) {
                                  errors = new ArrayList();
                              }
                              errors.add(phone + " is not a valid format of phone number");
                          }   
                       }
                  }
               }
               return errors;
            </Source>
          </ValidationScript>
        </Field>
        <Field displayName="con_prov_policy_duo_administrator_name" helpKey="help_con_prov_policy_duo_administrator_name" name="name" reviewRequired="true" section="create" type="string"/>
        <Field displayName="con_prov_policy_duo_administrator_password" helpKey="help_con_prov_policy_duo_administrator_password" name="password" reviewRequired="true" section="create" type="secret"/>
        <Field displayName="con_prov_policy_duo_administrator_phone" helpKey="help_con_prov_policy_duo_administrator_phone" name="phone" reviewRequired="true" section="create" type="string">
        <ValidationScript>
            <Source>
              import java.util.regex.Matcher;
              import java.util.regex.Pattern;
              import java.util.ArrayList;
              import java.util.List;
              List errors = null;
              String regex = "(?:\\+?(\\d{1,3}))?[-. (]*(\\d{3})[-. )]*(\\d{3})[-. ]*(\\d{4})";
              Pattern pattern = Pattern.compile(regex);
              if (phones != null) {
                  for (String phone: phones) {
                      if (phone != null) {
                          Matcher matcher = pattern.matcher(phone);
                          if (!matcher.matches()) {
                              if (errors == null) {
                                  errors = new ArrayList();
                              }
                              errors.add(phone + " is not a valid format of phone number");
                          }   
                       }
                  }
               }
               return errors;
             </Source>
        </ValidationScript>
         </Field>
         <Field displayName="con_prov_policy_duo_administrator_role" helpKey="help_con_prov_policy_duo_role" name="role" reviewRequired="true" section="create" type="string">
         <AllowedValuesDefinition>
            <Value>
              <List>
                <String>Owner</String>
                <String>Administrator</String>
                <String>Application Manager</String>
                <String>User Manager</String>
                <String>Help Desk</String>
                <String>Billing</String>
                <String>Phishing Manager</String>
                <String>Read-only</String>
              </List>
            </Value>
          </AllowedValuesDefinition>
        </Field>
     </Template>
     <Template name="Enable Account" schemaObjectType="account" usage="Enable">
      <Field filterString="" name="status" required="true" reviewRequired="true" type="string">
        <AllowedValuesDefinition>
          <Value>
            <List>
              <String>active</String>
              <String>bypass</String>
            </List>
          </Value>
        </AllowedValuesDefinition>
      </Field>
      <Field filterString="" name="enableStatus" type="string">
        <Attributes>
          <Map>
            <entry key="hidden" value="true"/>
          </Map>
        </Attributes>
        <Script>
          <Source>ref:status</Source>
        </Script>
      </Field>
    </Template>
    <Template name="Unlock Account" schemaObjectType="account" usage="Unlock">
      <Field filterString="" name="status" required="true" reviewRequired="true" type="string">
        <AllowedValuesDefinition>
          <Value>
            <List>
              <String>active</String>
              <String>bypass</String>
            </List>
          </Value>
        </AllowedValuesDefinition>
      </Field>
      <Field filterString="" name="enableStatus" type="string">
        <Attributes>
          <Map>
            <entry key="hidden" value="true"/>
          </Map>
        </Attributes>
        <Script>
          <Source>ref:status</Source>
        </Script>
      </Field>
    </Template>
    </Templates>
  </Application>
</ImportAction>