<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
  <!-- 
    -
    - Configuration Form for Provisioning Workflows
    -
    - The same form can drive almost all of our
    - Provisioning workflows we ship out of the box.
    -
    - There are four main sections to the configuration forms:
    -
    - 1) Approval
    - 2) Notification
    - 3) Policy Checking
    - 4) Advanced
    -
    - The main exception to the "one form fits all"
    - is the Manage Passwords workflow because it 
    - does not allow for approvals or policy 
    - checking during password changes. Because
    - of this they have different forms.
    -  
    -->
  <Form name="Provisioning Workflow Config Form" type="WorkflowConfig" hidden="true">
    <Section label="wf_config_provisioning_approval_section">

      <Field name="disableApprovals" displayName="wf_config_provisioning_approval_none"
             helpKey="help_wf_provisioning_approval_disable" type="boolean"
             postBack="true">

        <Script>
          <Source>
            <![CDATA[       
              import sailpoint.tools.Util;
                       
              if ( disableApprovals == void ) {
                  if ( approvalScheme == void ) {
                      approvalScheme = "none";
                  }
                  List approvalSchemeList = Util.asList(approvalScheme);
                  if ( Util.nullSafeContains(approvalSchemeList, "none") ) {
                      return true;
                  }
              }  
              return false;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="approvalSchemeField"
             displayName="wf_config_provisioning_approval_setting"
             helpKey="help_wf_provisioning_approval_setting"
             multi="true"
             authoritative="true"
             postBack="true">

        <Description>
          This field is dynamic based on the type of workflow,
          as the approval scheme values is the only real
          difference between what we need for Create and
          Update vs. normal provisioning. The type
          is injected into the rule/script context
          by the WorkflowBean.
        </Description>

        <Attributes>
          <Map>
            <entry key="hidden" value="script: sailpoint.tools.Util.otob(disableApprovals)"/>
            <entry key="ignoreWidth">
              <value><Boolean>true</Boolean></value>
            </entry>
            <entry key="anchorConfig" value="100%"/>
          </Map>
        </Attributes>
        <AllowedValuesDefinition>
          <Script>
            <Source>
              <![CDATA[
              import sailpoint.tools.Util;
              import sailpoint.object.Workflow;
              
              List values = new ArrayList();
              
              List manager = new ArrayList();
              manager.add("manager");
              manager.add("wf_config_provisioning_approval_manager");
              values.add(manager);
                 
              if ( workflowType != void && Util.nullSafeEq(Workflow.TYPE_LCM_IDENTITY, workflowType) ) {
                  // newManager scheme only makes sense with IIQ approvals
                  List neu = new ArrayList();
                  neu.add("newManager");
                  neu.add("wf_config_provisioning_approval_newmanager");
                  values.add(neu);             
              } else {
                  List owner = new ArrayList();
                  owner.add("owner");
                  owner.add("wf_config_provisioning_approval_owner");
                  values.add(owner);

                  List identity = new ArrayList();
                  identity.add("identity");
                  identity.add("wf_config_provisioning_approval_identityOrWorkgroup");
                  values.add(identity);
                                 
                  // security officer could be in the other list too not sure why it isn't
                  // an option listed in the workflow. Leave it out for now, but might want
                  // to revisit this.  
                  List so = new ArrayList();
                  so.add("securityOfficer");             
                  so.add("wf_config_provisioning_approval_so");
                  values.add(so);
              }
              return values;
            ]]>
            </Source>
          </Script>
        </AllowedValuesDefinition>
        <Script>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            
            List list = null;
            if ( approvalSchemeField == void && approvalScheme != void ) {
                if ( disableApprovals == void || !Util.otob(disableApprovals) ) {
                    list = Util.csvToList(approvalScheme);
                }
            }
            return list;
          ]]>
          </Source>
        </Script>
        <ValidationScript>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && !disableApprovals ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
          </Source>
        </ValidationScript>

      </Field>

      <Field name="approvalScheme"
             type="string"
             hidden="true"
             dynamic="true">
        <Description>
          This is the value that gets set on the initalizer
          based on the approvalSchemeField.  Since we
          store a csv we do a csv conversion of the
          values in approvalScheme field.
        </Description>

        <Script>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;

            String csv = null;
            if ( approvalSchemeField != void ) {
                csv = Util.listToCsv(approvalSchemeField);                
            }
            if ( disableApprovals != void && Util.otob(disableApprovals) ) {
                csv = "none";  
            }
            return csv;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="approvingIdentities" displayName="wf_config_provisioning_approval_identityOrWorkgroup_label"
             helpKey="help_wf_provisioning_identities_scheme"
             multi="true"
             type="identity">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return !sailpoint.tools.Util.nullSafeContains( approvalSchemeField, "identity");'/>
          </Map>
        </Attributes>
      </Field>

      <Field name="approvalEmailTemplate" displayName="wf_config_provisioning_approval_email_template"
             helpKey="help_wf_provisioning_approval_template" type="EmailTemplate">

        <Attributes>
          <Map>
            <entry key="hidden" value="script: approvalSchemeField == null || sailpoint.tools.Util.otob(disableApprovals)"/>
          </Map>
        </Attributes>
      </Field>

      <Field name="managerElectronicSignature" displayName="wf_config_provisioning_approval_manager_esig"
             helpKey="help_wf_provisioning_manager_esig" type="string"
             dynamic="true">

        <Attributes>
          <Map>
            <entry key="hidden">
              <value>
                <Script>
                  <Source>
                    <![CDATA[
                    // Hide this field if we are in the LMCIdentity workflow
                    import sailpoint.tools.Util;            
                    import sailpoint.object.Workflow;
                            
                    if ( Util.otob(disableApprovals) || !Util.nullSafeContains( approvalSchemeField, "manager") || 
                       ( workflowType != void && Util.nullSafeEq(Workflow.TYPE_LCM_IDENTITY, workflowType) || Util.nullSafeEq(Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType) ) ) {
                        return true;
                    }         
                    return false;
                  ]]>
                  </Source>
                </Script>
              </value>
            </entry>
          </Map>
        </Attributes>
        <AllowedValuesDefinition value="script: return sailpoint.workflow.FormUtil.getElectronicSignatureNames(context);"/>
      </Field>

      <Field name="approverElectronicSignature" displayName="wf_config_provisioning_approval_approver_esig"
             helpKey="help_wf_provisioning_approver_esig" type="string"
             dynamic="true">
        <Description>This field is only interesting from LCMIdentity and LCMRegistration workflows, hidden otherwise.</Description>
        <Attributes>
          <Map>
            <entry key="hidden">
              <value>
                <Script>
                  <Source>
                    <![CDATA[
                    import sailpoint.tools.Util;
                    import sailpoint.object.Workflow;
                    
                    if ( workflowType != void && Util.nullSafeEq(Workflow.TYPE_LCM_IDENTITY, workflowType) || Util.nullSafeEq(Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType) ) {
                        if ( Util.otob(disableApprovals) || approvalSchemeField == null ) {
                            return true;
                        } 
                        return false;
                    }     
                    return true;
                  ]]>
                  </Source>
                </Script>
              </value>
            </entry>
          </Map>
        </Attributes>
        <AllowedValuesDefinition value="script: return sailpoint.workflow.FormUtil.getElectronicSignatureNames(context);"/>
      </Field>

      <Field name="identityElectronicSignature" displayName="wf_config_provisioning_approval_identity_esig"
             helpKey="help_wf_provisioning_identity_esig" type="string"
             dynamic="true">

        <Attributes>
           <Map>
               <entry key="hidden"
                      value='script: return sailpoint.tools.Util.otob(disableApprovals) || !sailpoint.tools.Util.nullSafeContains( approvalSchemeField, "identity") || sailpoint.tools.Util.nullSafeEq(sailpoint.object.Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType);'/>
           </Map>
        </Attributes>
        <AllowedValuesDefinition value="script: return sailpoint.workflow.FormUtil.getElectronicSignatureNames(context);"/>
        <Script>
          <Source>
                    <![CDATA[
            import sailpoint.tools.Util;

            String val = value;
            if (value != null && !Util.nullSafeContains(approvalSchemeField, "identity")) {
                val = null;
            }
            return val;;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="securityOfficerName" displayName="wf_config_provisioning_approval_security_officer"
             helpKey="help_wf_provisioning_securityofficer_name"  type="identity">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableApprovals) || !sailpoint.tools.Util.nullSafeContains( approvalSchemeField, "securityOfficer");'/>
          </Map>
        </Attributes>
      </Field>

      <Field name="securityOfficerElectronicSignature" displayName="wf_config_provisioning_approval_security_esig"
             helpKey="help_wf_provisioning_sofficer_esig"  type="string"
             dynamic="true">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableApprovals) || !sailpoint.tools.Util.nullSafeContains( approvalSchemeField, "securityOfficer") || sailpoint.tools.Util.nullSafeEq(sailpoint.object.Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType);'/>
          </Map>
        </Attributes>
        <AllowedValuesDefinition value="script: return sailpoint.workflow.FormUtil.getElectronicSignatureNames(context);"/>
      </Field>

      <Field name="ownerElectronicSignature" displayName="wf_config_provisioning_approval_owner_esig"
             helpKey="help_wf_provisioning_owner_esig" type="string"
             dynamic="true">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableApprovals) || !sailpoint.tools.Util.nullSafeContains( approvalSchemeField, "owner") || sailpoint.tools.Util.nullSafeEq(sailpoint.object.Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType);'/>
          </Map>
        </Attributes>
        <AllowedValuesDefinition value="script: return sailpoint.workflow.FormUtil.getElectronicSignatureNames(context);"/>
      </Field>

      <Field name="fallbackApprover" displayName="wf_config_provisioning_approval_fallback_approver"
             helpKey="help_wf_provisioning_fallback_approver" type="identity">
        <Attributes>
          <Map>
            <entry key="hidden" value="script: return approvalSchemeField == null || sailpoint.tools.Util.otob(disableApprovals);"/>
          </Map>
        </Attributes>
      </Field>

    </Section>

    <!--  Notification Section -->
    <Section label="wf_config_provisioning_notification_section">

      <Field name="disableNotifications" displayName="wf_config_provisioning_notification_none"
             helpKey="help_wf_provisioning_notification_disable" type="boolean"
             postBack="true">

        <Script>
          <Source>
            <![CDATA[                
              import sailpoint.tools.Util;
          
              if ( disableNotifications == void ) {
                  if ( notificationScheme == void ) {
                      notificationScheme = "none";
                  }
                  List notificationSchemeList = Util.asList(notificationScheme);
                  if ( Util.nullSafeContains(notificationSchemeList, "none") ) {
                      return true;
                  }
              }  
              return false;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="notificationSchemeField" displayName="wf_config_provisioning_notification_scheme"
             helpKey="help_wf_provisioning_notification_scheme"
             type="string" multi="true"
             postBack="true">

        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableNotifications);'/>
          </Map>
        </Attributes>

        <AllowedValuesDefinition>
          <Script>
            <Source>
              <![CDATA[
              import sailpoint.tools.Util;
              import sailpoint.object.Workflow;
              
              List values = new ArrayList();
         
              List manager = new ArrayList();
              manager.add("manager");
              manager.add("wf_config_provisioning_notification_manager");
              values.add(manager);
              
              List user = new ArrayList();
              user.add("user");
              user.add("wf_config_provisioning_notification_user");
              values.add(user);
              
              if ( !Util.nullSafeEq(Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType) ) {
                  List requester = new ArrayList();
                  requester.add("requester");
                  requester.add("wf_config_provisioning_notification_requester");
                  values.add(requester);
              }
              return values;
            ]]>
            </Source>
          </Script>
        </AllowedValuesDefinition>
        <Script>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.object.Workflow;
            
            List list = null;
            if ( notificationSchemeField == void ) {
                if ( notificationScheme != void && (disableNotifications != void || !Util.otob(disableNotifications)) ) {
                    list = Util.csvToList(notificationScheme); 
                    if ( Util.nullSafeEq(Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType) ) {
                    
                    }
                }
            }
            return list;
          ]]>
          </Source>
        </Script>
        <ValidationScript>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && !disableNotifications ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
          </Source>
        </ValidationScript>
      </Field>

      <Field name="notificationScheme" hidden="true"
             dynamic="true">
        <Description>
          This is the value that gets set on the initalizer
          based on the notificationSchemeField.  Since we
          store a csv we do a csv conversion of the
          values in approvalScheme field.
        </Description>
        <Script>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            
            String csv = null;
            if ( notificationSchemeField != void ) {
                csv = Util.listToCsv(notificationSchemeField);                
            }  
            if ( disableNotifications != void && Util.otob(disableNotifications) ) {
                csv = "none";
            }
            
            return csv;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="userEmailTemplate" displayName="wf_config_provisioning_notification_user_email"
             helpKey="help_wf_provisioning_user_template" type="EmailTemplate">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableNotifications) || !sailpoint.tools.Util.nullSafeContains( notificationSchemeField, "user");'/>
          </Map>
        </Attributes>
      </Field>

      <Field name="requesterEmailTemplate" displayName="wf_config_provisioning_notification_requester_email"
             helpKey="help_wf_provisioning_requester_template" type="EmailTemplate">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableNotifications) || !sailpoint.tools.Util.nullSafeContains( notificationSchemeField, "requester") || sailpoint.tools.Util.nullSafeEq(sailpoint.object.Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType);'/>
          </Map>
        </Attributes>
      </Field>

      <Field name="managerEmailTemplate" displayName="wf_config_provisioning_notification_manager_email"
             helpKey="help_wf_provisioning_manager_template" type="EmailTemplate">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return  sailpoint.tools.Util.otob(disableNotifications) || !sailpoint.tools.Util.nullSafeContains( notificationSchemeField, "manager");'/>
          </Map>
        </Attributes>
      </Field>

    </Section>

    <!--  Policy Section -->
    <Section label="wf_config_provisioning_policy_section">

      <Field name="policyScheme" displayName="wf_config_provisioning_policy_scheme"
             helpKey="help_wf_provisioning_policy_scheme"
             type="string" postBack="true">

        <AllowedValuesDefinition>
          <Script>
            <Source>
              <![CDATA[
              import sailpoint.tools.Util;
              import sailpoint.object.Workflow;

              List values = new ArrayList();
         
              List none = new ArrayList();
              none.add("none");
              none.add("wf_config_provisioning_policy_none");
              values.add(none);
              
              List cont = new ArrayList();
              cont.add("continue");
              cont.add("wf_config_provisioning_policy_continue");
              values.add(cont);
              
              // Interactive doesn't make sense during LCM Create and Update
              // OR during Registration since there won't be any 
              // roles or entitlements assigned
              if ( !Util.nullSafeEq(Workflow.TYPE_LCM_SELF_SERVICE_REGISTRATION, workflowType) && !Util.nullSafeEq(Workflow.TYPE_LCM_IDENTITY, workflowType) ) {
                  List interactive = new ArrayList();
                  interactive.add("interactive");
                  interactive.add("wf_config_provisioning_policy_interactive");
                  values.add(interactive);
              }
              
              List fail = new ArrayList();
              fail.add("fail");
              fail.add("wf_config_provisioning_policy_fail");
              values.add(fail);
              
              return values;
            ]]>
            </Source>
          </Script>
        </AllowedValuesDefinition>

      </Field>

      <Field name="policiesToCheckField" displayName="wf_config_provisioning_policy_check"
             helpKey="help_wf_provisioning_policy_check"
             type="string"
             postBack="true">

        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.nullSafeEq( policyScheme, "none");'/>
          </Map>
        </Attributes>
        <AllowedValuesDefinition>
          <Value>
            <List>
              <List>
                <String>checkAll</String>
                <String>wf_config_provisioning_policy_all</String>
              </List>
              <List>
                <String>select</String>
                <String>wf_config_provisioning_policy_selected</String>
              </List>
            </List>
          </Value>
        </AllowedValuesDefinition>
        <Script>
          <Source>
            <![CDATA[        
            String val = value;

            if ( policiesToCheckField == void || value == null ) {
                if ( policiesToCheck != void && policiesToCheck != null 
                     && !sailpoint.tools.Util.nullSafeEq( policyScheme, "none")) {
                    val = "select";
                } else {
                    val = "checkAll";
                }                 
            }
            return val;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="policiesToCheck" displayName="wf_config_provisioning_policy_policies"
             helpKey="help_wf_provisioning_policies"
             multi="true"
             type="Policy"
             dynamic="true">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.nullSafeEq( policiesToCheckField, "checkAll") || sailpoint.tools.Util.nullSafeEq( policyScheme, "none");'/>
            <entry key="ignoreWidth">
              <value><Boolean>true</Boolean></value>
            </entry>
            <entry key="anchorConfig" value="100%"/>
          </Map>
        </Attributes>

        <ValidationScript>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            import sailpoint.tools.Message;
            import sailpoint.web.messages.MessageKeys;
            
            Message error = null;
            if ( value == null && Util.nullSafeEq(policiesToCheckField, "select") 
              && !Util.nullSafeEq( policyScheme, "none") ) {
                Object[] msgParams = { field.getName() };
                error = new Message(MessageKeys.WF_CONFIG_PROVISIONING_VALIDATE_NULL, msgParams );
            }  
            return error;
          ]]>
          </Source>
        </ValidationScript>
        <Script>
          <Source>
            <![CDATA[ 
          import sailpoint.tools.Util;

          Object val = value;
          if ( Util.nullSafeEq( policiesToCheckField, "checkAll" ) || policiesToCheckField == null || Util.nullSafeEq( policyScheme, "none" )) {          
              val = null;
          }
          return val;
          ]]>
          </Source>
        </Script>
      </Field>


    </Section>

    <!--  Advanced Section -->
    <Section label="wf_config_provisioning_advanced_section">

      <Field name="workItemPriority" displayName="wf_config_provisioning_advanced_priority" multi="false"
             helpKey="help_wf_provisioning_advanced_priority">
        <AllowedValuesDefinition>
          <Value>
            <List>
              <List>
                <String>Low</String>
                <String>wf_config_provisioning_priority_low</String>
              </List>
              <List>
                <String>Normal</String>
                <String>wf_config_provisioning_priority_normal</String>
              </List>
              <List>
                <String>High</String>
                <String>wf_config_provisioning_priority_high</String>
              </List>
            </List>
          </Value>
        </AllowedValuesDefinition>
      </Field>

      <Field name="doRefresh" displayName="wf_config_provisioning_advanced_refresh" helpKey="help_wf_provisioning_refresh" type="boolean"/>
      <Field name="foregroundProvisioning" displayName="wf_config_provisioning_advanced_foreground" helpKey="help_wf_provisioning_foreground" type="boolean"/>
      <Field name="trace" displayName="wf_config_provisioning_advanced_trace" helpKey="help_wf_trace" type="boolean"/>
    </Section>

  </Form>

  <!-- 
    -
    - Configuration Form for LCM Manage Passwords Workflow
    -
    - This form is a subset of the form from above, it doesn't
    - include the Approval or Policy checking options.
    -
    -->
  <Form name="LCM Manage Passwords Config Form" type="WorkflowConfig" hidden="true">

    <!--  Notification Section -->
    <Section label="wf_config_provisioning_notification_section">

      <Field name="disableNotifications" displayName="wf_config_provisioning_notification_none"
             helpKey="help_wf_provisioning_notification_disable" type="boolean"
             postBack="true">

        <Script>
          <Source>
            <![CDATA[                
              import sailpoint.tools.Util;
          
              if ( disableNotifications == void && notificationScheme != void ) {
                  List notificationSchemeList = Util.asList(notificationScheme);
                  if ( Util.nullSafeContains(notificationSchemeList, "none") ) {
                      return true;
                  }
              }  
              return false;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="notificationSchemeField" displayName="wf_config_provisioning_notification_scheme"
             helpKey="help_wf_provisioning_notification_scheme"
             type="string" multi="true"
             postBack="true">

        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableNotifications);'/>
          </Map>
        </Attributes>

        <AllowedValuesDefinition>
          <Script>
            <Source>
              <![CDATA[
              import sailpoint.tools.Util;

              List values = new ArrayList();
         
              List manager = new ArrayList();
              manager.add("manager");
              manager.add("wf_config_provisioning_notification_manager");
              values.add(manager);
              
              List manager = new ArrayList();
              manager.add("user");
              manager.add("wf_config_provisioning_notification_user");
              values.add(manager);
              
              List manager = new ArrayList();
              manager.add("requester");
              manager.add("wf_config_provisioning_notification_requester");
              values.add(manager);

              return values;
            ]]>
            </Source>
          </Script>
        </AllowedValuesDefinition>
        <Script>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            
            List list = null;
            if ( notificationSchemeField == void ) {
                if ( disableNotifications != void || !Util.otob(disableNotifications) ) {
                    list = Util.csvToList(notificationScheme); 
                }
            }
            return list;
          ]]>
          </Source>
        </Script>

      </Field>

      <Field name="notificationScheme" hidden="true"
             dynamic="true">
        <Description>
          This is the value that gets set on the initalizer
          based on the notificationSchemeField.  Since we
          store a csv we do a csv conversion of the
          values in approvalScheme field.
        </Description>
        <Script>
          <Source>
            <![CDATA[
            import sailpoint.tools.Util;
            
            String csv = null;
            if ( notificationSchemeField != void ) {
                csv = Util.listToCsv(notificationSchemeField);                
            }  
            if ( disableNotifications != void && Util.otob(disableNotifications) ) {
                csv = "none";
            }
            
            return csv;
          ]]>
          </Source>
        </Script>
      </Field>

      <Field name="userEmailTemplate" displayName="wf_config_provisioning_notification_user_email"
             helpKey="help_wf_provisioning_user_template" type="EmailTemplate">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableNotifications) || !sailpoint.tools.Util.nullSafeContains( notificationSchemeField, "user");'/>
          </Map>
        </Attributes>
      </Field>

      <Field name="requesterEmailTemplate" displayName="wf_config_provisioning_notification_requester_email"
             helpKey="help_wf_provisioning_requester_template" type="EmailTemplate">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return sailpoint.tools.Util.otob(disableNotifications) || !sailpoint.tools.Util.nullSafeContains( notificationSchemeField, "requester");'/>
          </Map>
        </Attributes>
      </Field>

      <Field name="managerEmailTemplate" displayName="wf_config_provisioning_notification_manager_email"
             helpKey="help_wf_provisioning_manager_template" type="EmailTemplate">
        <Attributes>
          <Map>
            <entry key="hidden"
                   value='script: return  sailpoint.tools.Util.otob(disableNotifications) || !sailpoint.tools.Util.nullSafeContains( notificationSchemeField, "manager");'/>
          </Map>
        </Attributes>
      </Field>

    </Section>

    <!--  Advanced Section -->
    <Section label="wf_config_provisioning_advanced_section">

      <Field name="workItemPriority" displayName="wf_config_provisioning_advanced_priority" multi="false"
             helpKey="help_wf_provisioning_advanced_priority">
        <AllowedValuesDefinition>
          <Value>
            <List>
              <List>
                <String>Low</String>
                <String>wf_config_provisioning_priority_low</String>
              </List>
              <List>
                <String>Normal</String>
                <String>wf_config_provisioning_priority_normal</String>
              </List>
              <List>
                <String>High</String>
                <String>wf_config_provisioning_priority_high</String>
              </List>
            </List>
          </Value>
        </AllowedValuesDefinition>
      </Field>

      <Field name="foregroundProvisioning" displayName="wf_config_provisioning_advanced_foreground" helpKey="help_wf_provisioning_foreground" type="boolean"/>
      <Field name="trace" displayName="wf_config_provisioning_advanced_trace" helpKey="help_wf_trace" type="boolean"/>
    </Section>


  </Form>
  
</sailpoint>
