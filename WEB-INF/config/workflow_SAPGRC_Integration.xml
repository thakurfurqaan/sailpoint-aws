<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>
    <Workflow libraries="SAPGRCIntegration" name="SAP GRC Request Executor" type="Subprocess">
      <Variable input="true" name="approvalSet" output="true">
        <Description>
          This attributes is set during the "Build Approval Set" step,
          which builds this list by going through the ProvisioningPlan
          to build the line items that need to be approved,
          This variable includes all ApprovalItems that are part of
          the request process and is updated during the AfterScript
          of the approval process by assimilating the decisions
          and comments from the Approvals copy of the ApprovalItem.
        </Description>
      </Variable>
      <Variable input="true" name="plan">
        <Description>
          A master provisioning plan object required for building transient approval set for SAP GRC response.
        </Description>
      </Variable>
      <Variable initializer="ref:identityDisplayName" input="true" name="identityDisplayName" required="true"/>
      <Variable input="true" name="userGroupsMap">
        <Description>
          The map containing UserGroup data required as an input for SAP GRC User Access Web service.
          Map(String, String) where the accepted keys are :-
            UserGroup               User Group
            UserGroupDesc           User Group Description
        </Description>
      </Variable>
      <Variable input="true" name="customFieldsValMap">
        <Description>
         The map containing CustomFieldsVal data required as an input for SAP GRC User Access Web service.
          Map(String, String) where the accepted keys are :-
            Fieldname              Name of Custom Field
            Value                  Value of Custom Field
        </Description>
      </Variable>
      <Variable input="true" name="parameterMap">
        <Description>
          A list containing Parameter data required as an input for SAP GRC User Access Web service.
          List(Map(String, String)) where the map accepts following keys :-
            Parameter              Parameter Name
            ParameterValue         Parameter Value
            ParameterDesc          Parameter Description
        </Description>
      </Variable>
      <Variable input="true" name="requestHeaderDataMap">
        <Description>
          A map containing RequestHeaderData required as an input for SAP GRC User Access Web service.
          Map(String, String) where the accepted keys are :-
            Reqtype                Request Type
            Priority               Priority
            ReqDueDate             Request Due Date
            ReqInitSystem          Request Initiation System
            Requestorid            Requester ID
            Email                  Requester E-mail
            RequestReason          Reason of Request
            Funcarea               Functional Area
            Bproc                  Business Process
        </Description>
      </Variable>
      <Variable input="true" name="credentialsMap">
        <Description>
          A map to store credential information which is gathered from SAP GRC application.
        </Description>
      </Variable>
      <Variable input="true" name="requestedLineItemMap">
        <Description>
          A list containing RequestedLineItem data required as an input for SAP GRC User Access Web service.
          List(Map(String, String)) where the map accepts following keys :-

            ItemName               Item Name
            Connector              System ID
            ProvItemType           Provision Item Type
            ProvType               Provision Type
            AssignmentType         Assignment Type
            ProvStatus             Provision Status
            ValidFrom              Valid From
            ValidTo                Valid To
            FfOwner                Firefighter Owner
            Comments               Comments
            ProvAction             Provision Action
            RoleType               Role Type
            ObjectType             Object Type
            ReportFormat           Report Format
        </Description>
      </Variable>
      <Variable input="true" name="userInfoMap">
        <Description>
          A list containing UserInfo data required as an input for SAP GRC User Access Web service.
          List(Map(String, String)) where the map accepts following keys :-

            Userid                 User ID
            Title                  Academic/Personal title 
            Fname                  User First Name
            Lname                  User Last Name
            SncName                SNC Name
            UnsecSnc               User SNC Name
            Accno                  User Account Number
            UserGroup              User Group
            ValidFrom              Valid From Date
            ValidTo                Valid To
            Empposition            Position of Employee
            Empjob                 Job of Employee
            Personnelno            Personnel Number
            Personnelarea          Personnel Area
            CommMethod             Communication Method
            Fax                    FAX
            Email                  E-mail
            Telnumber              Telephone Number
            Department             Department
            Company                Company
            Location               Location
            Costcenter             Cost Center
            Printer                Printer
            Orgunit                Organization Unit
            Emptype                Employee Type
            Manager                Manager
            ManagerEmail           Manager E-mail
            ManagerFirstname       Manager First Name
            ManagerLastname        Manager Last Name
            StartMenu              Start Menu
            LogonLang              Logon Language
            DecNotation            Decimal Notation
            DateFormat             Date Format
            Alias                  Alias
            UserType               User Type
        </Description>
      </Variable>
      <Variable input="true" name="language">
        <Description>
          SAP System Language.
        </Description>
      </Variable>
      <Variable input="true" name="requestStatusMap" output="true">
        <Description>
          The request status map containing the status information of the request received from the Request Detail Web service.
          This map is returned to the calling workflow.
          Request status could be OK or FAILED.
          The map has all the information retrieved from the last stage of approval on SAP GRC system. 
          The Map(String,Object) containing following fields.

          1) RequestStatus         Status of the request

          2) Risk Violation Information
          RiskViolations           This is a list of key as a String and Object as a value
            UserId                 User Id
            RiskId                 Risk Id
            RiskDesc               Risk Description
            RiskLevelDesc          Risk Level Description
            RuleId                 Rule Id
            System                 System Name
            RoleList               Role List, A Map(String,String) containing following -
                Role               Role Name
                CompositRole       Composite Role
            Action                 This is a list containing the Action names. List(String)

          3) Requested Item Details - The details of requested items and its related properties
            RequestedItems        A Map(String,String) containing following -
            ItemId                 Item Id
            ItemDesc               Item Description
            Connector              System Connector
            ProvItemType           Provision Item Type
            ProvItemTypeDesc       Provision Item Description
            ProvType               Provision Type
            ProvTypeDesc           Provision Type Description
            AssignmentType         Assignment type
            AssignmentTypeDesc     Assignment Type Description
            ProvStatus             Provision Status
            ProvStatusDesc         Provision Status Description
            Status                 Status
            ApprovalStatus         Approval Status
            ApprovalStatusDesc     Approval Status Description
            ProvAction             Provision Action
            ProvActionDesc         Provision Action Description
            ValidFrom              Valid From Date
            ValidTo                Valid To Date
            Comments               Comments
            Owners                 Owners
            ReqItemDesc            Request Item Description

          4) Current Stage - The stage at which the request is currently residing.
            CurrentStage           The Map(String,String) containing following -
            CurstageName           Current Stage Name
            CurstageDesc           Current Stage Description
            Approver               Approver - A comma separated approvers list

          5) MsgType - Contains type of exception occurred in the web service call.

          6) MsgStatement - A short description about the failure occurred while executing an User Access Web service.
        </Description>
      </Variable>
      <Variable input="true" name="connectionTimeout">
        <Description>
          The Axis2 timeout for the Web service connection timeout. This field accepts the value in minutes.
        </Description>
      </Variable>
      <Variable input="true" name="requestNumber">
        <Description>
          The request number received after successful execution of the User Access Web service.
          This Request number is used by Request Detail Web service for polling.
        </Description>
      </Variable>
      <Variable  input="true" name="pollingInterval">
        <Description>
          The polling interval in minutes to check the status of the request.
        </Description>
      </Variable>
        <Variable initializer="Connection reset,No route to host,Cannot find server" input="true" name="retriableErrors">
        <Description>
          A comma separated string that specifies errors which will be retried while getting the status of the request.
        </Description>
      </Variable>  
      <Variable  initializer="3" input="true" name="numberOfRetries">
        <Description>
          The number of retries that will be attempted before failure of the provisioning activities.
        </Description>
      </Variable>
      <Variable name="auditLog" output="true">
        <Description>The handle for Audit Log in the form of map. This map contains the entire Audit Log information for the particular request.
        Audit Log will received after successful execution of the SAP GRC Audit Log Web service.</Description>
      </Variable>
      <Variable initializer="false" input="true" name="trace">
        <Description>Used for debugging this workflow and when set to true trace will be sent to stdout.</Description>
      </Variable>
      <Variable name="requestStubDetailsMap">
        <Description>Holding user info and headerinfo to generate request detail stub.</Description>
      </Variable>
      <Variable name="endDate" output="true">
      	<Description>End date of the role assignment.</Description>
      </Variable>
      <Variable name="startDate" output="true">
      	<Description>Start date of the role assignment.</Description>
      </Variable>
      <Description>
         The subprocess to perform SAP GRC check for requested Roles and Profiles for applications of type SAP. A Risk Analysis, Mitigation and Approval is done at SAP GRC side. The subprocess generates an user access request at SAP GRC side and checks for the status in asynchronous manner till it receives the Approved or Rejected response.
      </Description>
      <Step icon="Start" name="Start" posX="28" posY="10">
        <Transition to="Execute Request"/>
      </Step>
      <Step action="executeUserAccessRequest" icon="Task" name="Execute Request" posX="176" posY="11" resultVariable="requestNumber" wait="1">
        <Description>
          This step will execute User Access Web service based on the maps received from the previous step.
          On successful execution of the web service a request number will be returned.
        </Description>
        <Transition to="Check Request Status"/>
      </Step>
      <Step action="checkRequestDetails" icon="Task" name="Check Request Status" posX="310" posY="11" resultVariable="requestStatusMap">
       <Arg name="retriableErrors" value="ref:retriableErrors"/>
       <Arg name="numberOfRetries" value="ref:numberOfRetries"/>
       <Arg name="requestNumber" value="ref:requestNumber"/>
       <Arg name="requestStubDetailsMap" value="ref:requestStubDetailsMap"/>
        <Description>
              This step checks the status of the request submitted to the SAP GRC system. Polling happens after regular intervals.
              If the request is in pending state, it waits for the interval duration specified and checks for the status again till it receives the status as OK or FAILED.
              The step uses SAP GRC Request Detail Web service.
            </Description>
        <Return name="requestStatusMap" to="requestStatusMap"/>
        <Transition to="Wait for next retry">
          <Script>
            <Source>   
                  <![CDATA[                 
                         import java.util.HashMap;
                         private String requestStatus = requestStatusMap.get("RequestStatus");
                         private static String retry_status_true = "TRUE";
                         private String retry_status_false = "FALSE";
                         private static String retry_status_pending = "PENDING";
                         private static String status_error = "ERROR";
                         private static String map_current_stage = "CurrentStage";
                         private static String cur_stage_status = "CurstageStatus";
                         private static String cur_stage_name = "CurstageName";
                         private static String string_empty = "";
                         // workflow context will set requestStatusMap with retry status to "TRUE" or "FALSE".
                         private String retryError = requestStatusMap.get("RetryError");
                         boolean bRetry = true;
                         // if request status is "PENDING" or retry status is "TRUE" then the operation try again. 
                         if ( null != requestStatus) {
                            if (requestStatus.equals(retry_status_pending) || requestStatus.equals(string_empty)) {
                               ArrayList currentStageList = requestStatusMap.get(map_current_stage);
                                  if (currentStageList != null) {
                                     for (HashMap currentStageMap : currentStageList) {
                                        String curStageStatus = currentStageMap.get(cur_stage_status);
                                        String curStageName = currentStageMap.get(cur_stage_name);
                                        if ((curStageStatus != null && curStageStatus.equals(status_error)) || (curStageName == null ||     curStageName.equals(string_empty))) {
                                           bRetry = false;
                                           break;
                                        }
                                     }
                                  }

                            } else {
                                bRetry = false;
                            }
                         }
                         else if(null != retryError) {
                             if(retryError.equals(retry_status_false))
                                bRetry = false;
                         }
                         return bRetry;
                    ]]>
              </Source>
          </Script>
       </Transition>
       <Transition to="Update GRC Response"/>
      </Step>
      <Step name="Wait for next retry" posX="343" posY="188" wait="ref:pollingInterval">
        <Arg name="pollingInterval" value="call:getSAPGRCPollingInterval"/>
        <Description>
          This is a sleep step and just waits to execute the next step.
          Typically only called when we are retrying to give us some delay
          between calls.
        </Description>
        <Transition to="Check Request Status"/>
      </Step>      
      <Step action="updateGRCResponse" icon="Task" name="Update GRC Response" posX="580" posY="10"
            resultVariable="approvalSet">
        <Arg name="auditLogMap" value="call:getAuditLogMap"/>
        <Arg name="commentList">
          <Script>
            <Source>
              // this block is optional, here you can add
              // messages in warning and error section.

              // here you can make use of auditLogMap variable
              // to build your messages.
              import java.util.ArrayList;
              import java.util.List;
              List commentList = new ArrayList();
              // add message to be displayed in this list
              // message should be of java.lang.String type
              return commentList;
            </Source>
          </Script>
        </Arg>
        <Arg name="plan" value="ref:plan"/>
        <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
        <Arg name="requestedLineItemMap" value="ref:requestedLineItemMap"/>
        <Arg name="requestStatusMap" value="ref:requestStatusMap"/>
        <Description>This step adds rejected approval items if SAP GRC rejects this request.</Description>
        <Return name="approvalSet" to="approvalSet"/>
        <Return name="endDate" to="endDate"/>
        <Return name="startDate" to="startDate"/>
        <Transition to="end"/>
      </Step>
      <Step icon="Stop" name="end" posX="883" posY="35"/>
    </Workflow>

    <Workflow  explicitTransitions="true"  name="SAP GRC Data Generator" libraries="SAPGRCIntegration,Identity" type="Subprocess">
      <Variable initializer="ref:identityName" input="true" name="identityName" required="true">
        <Description>The name of the identity being updated.</Description>
      </Variable>
      <Variable input="true" name="approvalSet" output="true" required="true">
         <Description>
            This attributes is set during the "Build Approval Set" step,
            which builds this list by going through the ProvisioningPlan
            to build the line items that need to be approved,

            This variable includes all ApprovalItems that are part of
            the request process and is updated during the AfterScript
            of the approval process by assimilating the decisions
            and comments from the Approvals copy of the ApprovalItem.
         </Description>
      </Variable>
      <Variable input="true" name="plan">
        <Description>
          A master provisioning plan object required for building transient approval set for GRC response.
        </Description>
      </Variable>
      <Variable input="true" name="project">
        <Description>
          A ProvisioningProject object describing the modifications to the identity.
          This may include a list of Question objects which will
          cause the generation of a Form and a WorkItem to solicit
          additional information necessary for provisioning.
        </Description>
      </Variable>
      <Variable initializer="ref:identityDisplayName" input="true" name="identityDisplayName" required="true"/>
      <Variable name="applicationNameSAPGRC" input="true">
        <Description>The name of Application used for SAP GRC checks.</Description>
      </Variable>
      <Variable name="accountRequestSAPGRC" output="true">
        <Description>A list of SAP Direct AccountRequest which are qualified for SAP GRC violation check.</Description>
      </Variable>
      <Variable name="completeDetailMap" output="true">
        <Description>The map used to keep all other maps which are required as an input for SAP GRC Request Executor subprocess.</Description>
      </Variable>
      <Variable name="userInfoMap" output="true">
        <Description>A list containing UserInfo data required as an input for SAP GRC Request Executor subprocess.</Description>
      </Variable>
      <Variable name="requestedLineItemMap" output="true">
        <Description>A list containing RequestedLineItem data required as an input for SAP GRC Request Executor subprocess.</Description>
      </Variable>
      <Variable name="credentialsMap" output="true">
        <Description>The map containing values of credentials to connect to SAP GRC server.</Description>
      </Variable>
      <Variable name="requestHeaderDataMap" output="true">
        <Description>The map containing values of requester details which is required as input for SAP GRC Request Executor subprocess.</Description>
      </Variable>
      <Variable name="userGroupsMap" output="true">
        <Description>The map containing user group details which is required as input for SAP GRC Request Executor subprocess.</Description>
      </Variable>
      <Variable name="customFieldsValMap" output="true">
        <Description>The map containing custom values of requester which is required as input for SAP GRC Request Executor subprocess.</Description>
      </Variable>
      <Variable name="parameterMap" output="true">
        <Description>The map containing parameter values which is required as input for SAP GRC Request Executor subprocess.</Description>
      </Variable>
      <Variable name="language" output="true">
        <Description>The language used by requester. Default language is English "EN"</Description>
      </Variable>
      <Variable initializer="$(launcher)" input="true" name="requester">
        <Description>Requester who initiated the request</Description>
      </Variable>
      <Variable initializer="false" name="trace">
      <Description>Used for debugging this workflow and when set to true trace will be sent to stdout.</Description>
      </Variable>
      <Variable input="true" name="reportType">
      <Description>A comma separated string of Report Type values used for SAP GRC check.</Description>
      </Variable>
      <Variable input="true" name="riskLevel">
      <Description>A comma separated string of Risk Level values used for SAP GRC check.</Description>
      </Variable>
      <Variable input="true" name="ruleSetId">
      <Description>A comma separated string of Rule Set Id values used for SAP GRC check.</Description>
      </Variable>
      <Variable input="true" name="simulationRiskOnly">
	  <Description>SimulationRiskOnly means that results will display the results of risks or violations which will be obtained from the COMBINATION of user's existing assignment and the new assignments
		- If value specifed is X,it will just show the new violation result obtained from combination of new assignment.
		- If value specifed is Blank,it will show all the violations of old assignments as well as new assignments. It will be a consolidated violation result.</Description>
      </Variable>
      <Variable name="endDate" output="true">
      	<Description>End date of the role assignment.</Description>
      </Variable>
      <Variable name="startDate" output="true">
      	<Description>Start date of the role assignment.</Description>
      </Variable>     
        <Description>
          This subprocess is used in "Provision and Approval" subprocess. This will fetch details of an identity who requested for access, 
          the identity for whom access is requested and the details of the access which are requested.
        </Description> 
      <Step icon="Start" name="Start" posX="37" posY="11">
        <Transition to="Process GRC Approvals"/>
      </Step>
      <Step action="call:processApprovalDecisions" condition="script:!isNull(approvalSet)" icon="Task" name="Process GRC Approvals" posX="200" posY="11" resultVariable="project">
        <Arg name="project" value="ref:project"/>
        <Arg name="plan" value="ref:plan"/>
        <Arg name="approvalSet" value="ref:approvalSet"/>
        <Arg name="recompile" value="true"/>
        <Arg name="dontUpdatePlan" value="false"/>
        <Arg name="disableAudit" value="true"/>
        <Description>
            Processing Approval Set again after IIQ Approval decisions are processed.
            This will update plan and recompile project.
        </Description>
        <Transition to="Compile Project to get Partitioned Plans"/>
      </Step>
      <Step action="call:compileProvisioningProject" icon="Default" name="Compile Project to get Partitioned Plans" posX="258" posY="127" resultVariable="project">
        <Arg name="requester" value="ref:requester"/>
        <Arg name="ignoreStartDate" value="true"/>
        <Arg name="identityName" value="ref:identityName"/>
        <Arg name="plan" value="ref:plan"/>
        <Description>
            This Step will compile the provisioning project to generate the partitioned plans needed to generate the SAP GRC line items.
        </Description>
        <Transition to="Initialize Detail Map"/>
      </Step>
      <Step icon="Default" name="Initialize Detail Map" posX="317" posY="11" resultVariable="completeDetailMap">
      <Arg name="accountRequestSAPGRC" value="call:filterAccountRequestSAPGRC"/>
      <Arg name="requstInitconnectionName" value="call:getRequestInitializationSystem"/>
      <Arg name="identityName" value="ref:identityName"/>
      <Arg name="requester" value="ref:requester"/>
      <Arg name="sapRoleDates" value="call:getEffectiveStartDateEndDates"/>
      <Return name="accountRequestSAPGRC" to="accountRequestSAPGRC"/>
        <Script>
          <Source>
                <![CDATA[
                import java.util.HashMap;
                import java.util.List;
                import java.util.ArrayList;
                import java.util.Map;
                import sailpoint.object.Application;
                import sailpoint.object.ManagedAttribute;
                import sailpoint.object.ProvisioningPlan;
                import sailpoint.object.ProvisioningPlan.AttributeRequest;
                import sailpoint.object.ProvisioningPlan.AccountRequest;
                import java.util.Date;
                import java.text.SimpleDateFormat;
                
                /**
                ** Below are variables defined which can be used in case required.
                **/
                private static final String PRIORITY_MEDIUM = "006";
                private static final String PRIORITY_HIGH = "007";
                
                private static final String BUSINESS_PROCESS_BASIS = "Basis";
                private static final String BUSINESS_PROCESS_APO = "APO";
                private static final String BUSINESS_PROCESS_CRM = "CRM";
                private static final String BUSINESS_PROCESS_FINANCE = "Finance";
                private static final String BUSINESS_PROCESS_HR_PAYROLL = "HR and Payroll";
                
                private static final String REQUEST_TYPE_CREATE = "001";
                private static final String REQUEST_TYPE_MODIFY = "002";
                
                private static final String PROVISIONING_ACTION_ADD = "006";
                private static final String PROVISIONING_ACTION_MODIFY = "010";
                private static final String PROVISIONING_ACTION_DELETE = "009";
                
                private static final String PROVISIONING_ITEM_TYPE_ROL = "ROL";
                private static final String PROVISIONING_ITEM_TYPE_PRF = "PRF";

                private static final String SUNRISE_DATE = "addDate";
                private static final String SUNSET_DATE = "removeDate";

                private static final String OBJECT_TYPE_USR = "USR";
                /**
                 ** REPORT_FORMAT value depends on <ReportFormat> 2 </ReportFormat> tag of GracIdmUsrAccsReqServices webservice.
                 ** SAP GRC version  10.1, SP-Level 0011 or lower required to set <ReportFormat>DETAILED</ReportFormat>.
                 **/
                private static final String REPORT_FORMAT = "2";
                
                public List userInfoList = new ArrayList();
                public Map userDetailMap = null;
                public Map requestHeaderDataMap = new HashMap();
                public List requestLineItemList = new ArrayList();
                public Map requestLineDataMap = null;
                public Map completeDetailMap = new HashMap();
                public String nativeIdentity = null;
                public Identity identity = null;
                public String operation = null;
                

                
                /** 
                 ** Providing supporting function to get SAP GRC connector name from sailpoint application
                 **/
                public String getGRACConnectorName(String appName) throws Exception {
                    Application app = (Application) context.getObject(Application.class, appName);
                    String grcConnectorName = null;
                    if (null != app) {
                        grcConnectorName = (String) app.getAttributeValue("GRCConnectorName");
                    }
                    return grcConnectorName;
                }
                /**
                 **Supporting function to get value like single or composite for roles and profiles
                 **/
                public String getGRACEntitlementType(String assignmentName, Application app) {
                    ManagedAttribute ma = sailpoint.api.ManagedAttributer.getByDisplayName(context, app, assignmentName);
                    String type = null;
                    if (null != ma) {
                        type = (String) ma.getAttribute("Type");
                        if (null != type) {
                            if (type.equals("Single")) type = "SIN";
                            else if (type.equals("Composite")) type = "COM";
                            else type = "DER";
                        }
                    }
                    return type;
                }
                /**
                ** Function to populate user details for whom access is requested.
                **/
                public int populateUserDetailMap(AccountRequest accReq, Identity identity, Application app, int countUserKey) {
                    userDetailMap = new HashMap();
                    String nativeIdentity = accReq.getNativeIdentity();
                    String userId = null;
                    String firstName = null;
                    String lastName = null;
                    String email = null;
                    String manager =  null;
                    AttributeRequest attribReq = null;
                    if(isSAPDirectApplication(app)){
                        
                    userDetailMap.put("Userid", identity.getName());
                    userDetailMap.put("Fname", identity.getFirstname());
                    userDetailMap.put("Lname", identity.getLastname());
                    userDetailMap.put("Email", identity.getEmail());

                    userInfoList.add(userDetailMap);
                    countUserKey++;
                    
                    }
                    
                   return countUserKey;
                }
                /**
                ** Function to populate request item map which will contain all access request details for
                **/
                public int populateRequestItemMap(AccountRequest accReq, Application app, String applicationName, int countRoleKey) {
                    
                    List<AttributeRequest> attrReqList = accReq.getAttributeRequests();
                    // If we request for sap-direct create account without passing entitlement, accReq.getAttributeRequests()
                    // will be null. In such case countRoleKey will have 0 value which says we have to skip SAP GRC for this
                    // request.
                    if (Util.isEmpty(attrReqList))  {
                           return countRoleKey;
                    }
                    boolean isCuaApp = app.getBooleanAttributeValue("IsCUASystem");
                    for(AttributeRequest attrReq : attrReqList){
                    if(attrReq.getName().equals("Roles")){
                    AttributeRequest roleReq = attrReq;//accReq.getAttributeRequest("Roles");

                    // setting up start and end dates, start date to today's date and end date to 31-12-9999
                    String startDate = new SimpleDateFormat("yyyyMMdd").format(new Date());
                    // end date 99991231 is in format yyyyMMdd. This is the default end date on SAP system.
                    String endDate = "99991231";
                    if (null != roleReq) {
                        Object roleNameObject = roleReq.getValue();
                        if(roleNameObject instanceof String){
                            requestLineDataMap = new HashMap();
                            String roleName = (String)roleNameObject;
                            if (null != sapRoleDates.get(roleName + SUNRISE_DATE) || null != sapRoleDates.get(roleName + SUNSET_DATE)){
                                startDate = sapRoleDates.get(roleName + SUNRISE_DATE);
                                endDate = sapRoleDates.get(roleName + SUNSET_DATE);
                            }
                            fillRoleNameAndConnectorName(roleName, requestLineDataMap, isCuaApp, applicationName);
                            requestLineDataMap.put("ProvItemType", PROVISIONING_ITEM_TYPE_ROL);
                            requestLineDataMap.put("ObjectType", OBJECT_TYPE_USR);
                            requestLineDataMap.put("ReportFormat", REPORT_FORMAT);
                            requestLineDataMap.put("ValidFrom", startDate);
                            requestLineDataMap.put("ValidTo", endDate);
                            requestLineDataMap.put("RoleType", getGRACEntitlementType(roleName, app));
                            if (roleReq.getOperation().toString().equals("Add")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_ADD); // to add a role
                            if (roleReq.getOperation().toString().equals("Set")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_MODIFY); // to retain /change date
                            if (roleReq.getOperation().toString().equals("Remove")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_DELETE); // to remove date
                            requestLineItemList.add(requestLineDataMap);
                        }
                        else if(roleNameObject instanceof List)
                        {
                          List roleList = (List)roleNameObject;
                          for(String role:roleList){
                              if (null != sapRoleDates.get(role + SUNRISE_DATE) || null != sapRoleDates.get(role + SUNSET_DATE)){
                                startDate = sapRoleDates.get(role + SUNRISE_DATE);
                                endDate = sapRoleDates.get(role + SUNSET_DATE);
                            }
                            requestLineDataMap = new HashMap();
                            fillRoleNameAndConnectorName(role, requestLineDataMap, isCuaApp, applicationName);
                            requestLineDataMap.put("ProvItemType", PROVISIONING_ITEM_TYPE_ROL);
                            requestLineDataMap.put("ObjectType", OBJECT_TYPE_USR);
                            requestLineDataMap.put("ReportFormat", REPORT_FORMAT);
                            requestLineDataMap.put("ValidFrom", startDate);
                            requestLineDataMap.put("ValidTo", endDate);
                            requestLineDataMap.put("RoleType", getGRACEntitlementType(role, app));
                            if (roleReq.getOperation().toString().equals("Add")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_ADD); // to add a role
                            if (roleReq.getOperation().toString().equals("Set")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_MODIFY); // to retain /change date
                            if (roleReq.getOperation().toString().equals("Remove")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_DELETE);
                            requestLineItemList.add(requestLineDataMap);
                          }
                        }
                        countRoleKey++;
                    }
                   }
                  if(attrReq.getName().equals("Profiles")){
                   AttributeRequest profReq = attrReq;//accReq.getAttributeRequest("Profiles");
                    if (null != profReq) {
                            Object profReqObject = profReq.getValue();
                            if(profReqObject instanceof String){
                                requestLineDataMap = new HashMap();
                                String profileName = (String)profReqObject;
                                /**
                                * in IdentityIQ we store profile name as "Profile_Name ( Profile_description )"
                                * so extracting only the profile name from the whole string, checking for the " (" in the string.
                                */
                                if( !isCuaApp && profileName.contains( " (" )) {
                                    profileName = profileName.substring(0, profileName.indexOf(" ("));
                                }
                                fillRoleNameAndConnectorName(profileName, requestLineDataMap, isCuaApp, applicationName);
                                requestLineDataMap.put("ProvItemType", PROVISIONING_ITEM_TYPE_PRF);
                                requestLineDataMap.put("ObjectType", OBJECT_TYPE_USR);
                                requestLineDataMap.put("ReportFormat", REPORT_FORMAT);
                                requestLineDataMap.put("RoleType", getGRACEntitlementType(profileName, app));
                                if (profReq.getOperation().toString().equals("Add")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_ADD); // to add profile
                                if (profReq.getOperation().toString().equals("Set")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_MODIFY); // to retain /change date
                                if (profReq.getOperation().toString().equals("Remove")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_DELETE); // to remove date
                                requestLineItemList.add(requestLineDataMap);
                        }
                        else if(profReqObject instanceof List){
                            List profList = (List)profReqObject;
                            for(String profile:profList)
                              {
                                requestLineDataMap = new HashMap();
                                if( !isCuaApp && profile.contains( " (" )) {
                                      profile = profile.substring(0, profile.indexOf(" ("));
                                }
                                fillRoleNameAndConnectorName(profile, requestLineDataMap, isCuaApp, applicationName);
                                requestLineDataMap.put("ProvItemType", PROVISIONING_ITEM_TYPE_PRF);
                                requestLineDataMap.put("ObjectType", OBJECT_TYPE_USR);
                                requestLineDataMap.put("ReportFormat", REPORT_FORMAT);
                                requestLineDataMap.put("RoleType", getGRACEntitlementType(profile, app));
                                if (profReq.getOperation().toString().equals("Add")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_ADD); // to add a profile
                                if (profReq.getOperation().toString().equals("Set")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_MODIFY); // to retain /change date
                                if (profReq.getOperation().toString().equals("Remove")) requestLineDataMap.put("ProvAction", PROVISIONING_ACTION_DELETE); // to remove profile
                                requestLineItemList.add(requestLineDataMap);
                              }
                        }
                        countRoleKey++;
                    }
                    }
                    }
                   return countRoleKey;
                }
                /** Function to find whether the application type is SAP - Direct **/
                public boolean isSAPDirectApplication(Application app) {
                   if(app.getType().equals("SAP - Direct"))
                    return true;
                   else
                    return false;
                }
                
                /** Function to find whether the application type is SAP - Portal **/
                public boolean isSAPPortalApplication(Application app) {
                   if(app.getType().equals("SAP Portal - UMWebService"))
                    return true;
                   else
                    return false;
                  
                }
                
                /** Function checks if application is CUA or not, and prepares the requestedItem list accordingly.
                  * CUA role and profile has name as well as system id, so we have to separate them in order to fill the request. **/
                public void fillRoleNameAndConnectorName(String roleName, Map requestLineDataMap, boolean isCuaApp, String applicationName) {
                    if ( isCuaApp ) {
                        int slashPosition = roleName.indexOf("\\");
                        if (slashPosition != -1) {
                            String connectorNameCUA = roleName.substring(0,slashPosition);
                            String roleNameCUA = roleName.substring(slashPosition+1);
                            requestLineDataMap.put("ItemName", roleNameCUA);
                            requestLineDataMap.put("Connector", connectorNameCUA);
                        }
                    } else {
                        requestLineDataMap.put("ItemName", roleName);
                        requestLineDataMap.put("Connector", getGRACConnectorName(applicationName));
                    }
                }
                
                Identity identity = (Identity) context.getObject(Identity.class, identityName);
                /** Filling requestHeader map **/
                if(requester.equals("Scheduler"))
                 requester = identity.getManager().getName();
                Identity requestorID = (Identity) context.getObject(Identity.class, requester);
                requestHeaderDataMap.put("Priority", PRIORITY_MEDIUM); //Priority will be set to medium
                if(Util.isNotNullOrEmpty(requstInitconnectionName))
                    requestHeaderDataMap.put("ReqInitSystem", requstInitconnectionName);
                requestHeaderDataMap.put("Requestorid", requester);
                String email = requestorID.getEmail();
                requestHeaderDataMap.put("Email", email);
                requestHeaderDataMap.put("RequestReason", "Provisioning from IdentityIq");
                requestHeaderDataMap.put("Bproc", BUSINESS_PROCESS_BASIS); // This need to be decided by end user
                //end finish request header Map
                List accReqList = accountRequestSAPGRC;
                int countUserKey = 0;
                int countRoleKey = 0;
                String operation;
                for (AccountRequest accReq: accReqList) {
                    String applicationName = accReq.getApplication();
                    String nativeIdentity = accReq.getNativeIdentity();
                    Application app = (Application) context.getObject(Application.class, applicationName);
                    if (isSAPDirectApplication(app)){
                        //Will only come here if the type of application is "SAP - Direct"
                        operation = accReq.getOperation().toString(); 
                        if (operation.equals("Create")) {
                            requestHeaderDataMap.put("Reqtype", REQUEST_TYPE_CREATE); // request header data contains 001 for create
                            countUserKey = populateUserDetailMap(accReq, identity, app, countUserKey);
                            /**Populating access details**/
                            countRoleKey = populateRequestItemMap(accReq, app, applicationName, countRoleKey);
                        }
                        if (operation.equals("Modify")) {
                            requestHeaderDataMap.put("Reqtype", REQUEST_TYPE_MODIFY); // request header data contains 002 for modify.
                            if (isSAPDirectApplication(app)) {
                                countUserKey = populateUserDetailMap(accReq, identity, app, countUserKey);
                                /**Populating access details**/
                                countRoleKey = populateRequestItemMap(accReq, app, applicationName, countRoleKey);
                            }
                                
                            
                        }
                    }
                    if (isSAPPortalApplication(app)) {
                        /** Code to handle SAP Portal applciation. **/
                    }
                }
                completeDetailMap.put("userInfoMap", userInfoList); //userInfoMap);
                completeDetailMap.put("requestHeaderDataMap", requestHeaderDataMap);
                completeDetailMap.put("requestLineItemMap", requestLineItemList);
                return completeDetailMap;
                ]]>
         </Source>
        </Script>
        <Transition to="Compile Project to Remove Partitioned Plans"/>
      </Step>
      <Step action="call:compileProvisioningProject" icon="Default" name="Compile Project to Remove Partitioned Plans" posX="460" posY="13" resultVariable="project">
        <Arg name="requester" value="ref:requester"/>
        <Arg name="ignoreStartDate" value="false"/>
        <Arg name="identityName" value="ref:identityName"/>
        <Arg name="accountRequestSAPGRC" value="ref:accountRequestSAPGRC"/>
        <Arg name="plan" value="ref:plan"/>
        <Description>
          This step will compile the provisioning project to remove the partitioned plans.
        </Description>
        <Return name="completeDetailMap" to="completeDetailMap"/>
        <Transition to="Stop">
         <Script>
          <Source>
            <![CDATA[
                 import sailpoint.tools.Util;
                 List lineItemList = new ArrayList();
                 boolean flag =  false;
                 lineItemList = completeDetailMap.get("requestLineItemMap");
                 if (Util.isEmpty(lineItemList)) {
                    flag = true;
                 }
                 else if (Util.isEmpty(accountRequestSAPGRC)) {
                    flag = true;
                 }
                 return flag;
            ]]>
          </Source>
      </Script>
    </Transition>
    <Transition to="Invoke SAP GRC Request Executor"/>
  </Step>
      <Step icon="Default" name="Invoke SAP GRC Request Executor" posX="427" posY="200">
        <Arg name="userGroupsMap"/>
        <Arg name="userInfoMap" value="script:return completeDetailMap.get(&quot;userInfoMap&quot;);"/>
        <Arg name="requestHeaderDataMap" value="script:return completeDetailMap.get(&quot;requestHeaderDataMap&quot;);"/>
        <Arg name="plan" value="ref:plan"/>
        <Arg name="identityDisplayName" value="ref:identityDisplayName"/>
        <Arg name="parameterMap"/>
        <Arg name="credentialsMap" value="call:buildGRCCredentialMap"/>
        <Arg name="language" value="script:return &quot;EN&quot;;"/>
        <Arg name="customFieldsValMap"/>
        <Arg name="requestedLineItemMap" value="script:return completeDetailMap.get(&quot;requestLineItemMap&quot;);"/>
        <Arg name="completeDetailMap"/>
        <Arg name="reportType"/>
        <Arg name="riskLevel"/>
        <Arg name="ruleSetId"/>
        <Arg name="simulationRiskOnly"/>   
        <Return name="completeDetailMap" to="completeDetailMap"/>
        <Return name="userInfoMap" to="userInfoMap"/>
        <Return name="requestedLineItemMap" to="requestedLineItemMap"/>
        <Return name="requestHeaderDataMap" to="requestHeaderDataMap"/>
        <Return name="credentialsMap" to="credentialsMap"/>
        <Return name="userGroupsMap" to="userGroupsMap"/>
        <Return name="parameterMap" to="parameterMap"/>
        <Return name="customFieldsValMap" to="customFieldsValMap"/>
        <Return name="approvalSet" to="approvalSet"/>
        <Return name="riskLevel" to="riskLevel"/>
        <Return name="ruleSetId" to="ruleSetId"/>
        <Return name="reportType" to="reportType"/> 
        <Return name="simulationRiskOnly" to="simulationRiskOnly"/>  
        <Return name="endDate" to="endDate"/> 
        <Return name="startDate" to="startDate"/>   
        <WorkflowRef>
          <Reference class="sailpoint.object.Workflow" name="SAP GRC Request Executor"/>
        </WorkflowRef>
        <Transition to="Stop"/>
      </Step>
      <Step icon="Stop" name="Stop" posX="554" posY="11"/>
    </Workflow>
</sailpoint>